<?php
/**
 * MediaRepository.
 *
 * @copyright Axel Guckelsberger
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @package MediaRepository
 * @author Axel Guckelsberger <info@guite.de>.
 * @link http://zikula.de
 * @link http://zikula.org
 * @version Generated by ModuleStudio 0.5.5 (http://modulestudio.de) at Wed May 30 16:44:53 CEST 2012.
 */

/**
 * Ajax controller class.
 */
class MediaRepository_Controller_Base_Ajax extends Zikula_Controller_AbstractAjax
{


    /**
     * This method is the default function handling the ajax area called without defining arguments.
     *
     * @param array $args List of arguments.
     *
     * @return mixed Output.
     */
    public function main($args)
    {
        $this->throwForbiddenUnless(SecurityUtil::checkPermission($this->name . '::', '::', ACCESS_OVERVIEW), LogUtil::getErrorMsgPermission());
    }
    
    
    public function getMediumOwnerUsers()
    {
        return $this->getCommonUsersList();
    }
    
    /**
     * Retrieve a general purpose list of users.
     */ 
    public function getCommonUsersList()
    {
        if (!SecurityUtil::checkPermission($this->name . '::Ajax', '::', ACCESS_EDIT)) {
            return true;
        }
    
        $fragment = '';
        if ($this->request->isPost() && $this->request->request->has('fragment')) {
            $fragment = $this->request->request->get('fragment', '');
        } elseif ($this->request->isGet() && $this->request->query->has('fragment')) {
            $fragment = $this->request->query->get('fragment', '');
        }
    
        ModUtil::dbInfoLoad('Users');
        $tables = DBUtil::getTables();
    
        $usersColumn = $tables['users_column'];
    
        $where = 'WHERE ' . $usersColumn['uname'] . ' REGEXP \'(' . DataUtil::formatForStore($fragment) . ')\'';
        $results = DBUtil::selectObjectArray('users', $where);
    
        $out = '<ul>';
        if (is_array($results) && count($results) > 0) {
            foreach($results as $result) {
                $out .= '<li>' . DataUtil::formatForDisplay($result['uname']) . '<input type="hidden" id="' . DataUtil::formatForDisplay($result['uname']) . '" value="' . $result['uid'] . '" /></li>';
            }
        }
        $out .= '</ul>';
        return new Zikula_Response_Ajax_Plain($out);
    }
    
    /**
     * Retrieve item list for finder selections in Forms, Content type plugin and Scribite.
     *
     * @param array $args List of arguments.
     *
     * @return Zikula_Response_Ajax
     */
    public function getItemListFinder($args)
    {
        if (!SecurityUtil::checkPermission($this->name . '::Ajax', '::', ACCESS_EDIT)) {
            return true;
        }
    
        $objectType = 'medium';
        if ($this->request->isPost() && $this->request->request->has('ot')) {
            $objectType = $this->request->request->filter('ot', 'medium', FILTER_SANITIZE_STRING);
        } elseif ($this->request->isGet() && $this->request->query->has('ot')) {
            $objectType = $this->request->query->filter('ot', 'medium', FILTER_SANITIZE_STRING);
        }
        if (!in_array($objectType, MediaRepository_Util_Controller::getObjectTypes('controllerAction', array('controller' => 'ajax', 'action' => 'getItemListFinder')))) {
            $objectType = MediaRepository_Util_Controller::getDefaultObjectType('controllerAction', array('controller' => 'ajax', 'action' => 'getItemListFinder'));
        }
    
        $repository = $this->entityManager->getRepository('MediaRepository_Entity_' . ucfirst($objectType));
        $idFields = ModUtil::apiFunc($this->name, 'selection', 'getIdFields', array('ot' => $objectType));
        $titleField = $repository->getTitleFieldName();
        $descriptionField = $repository->getDescriptionFieldName();
    
        $sort = (isset($args['sort']) && !empty($args['sort'])) ? $args['sort'] : $this->request->getPost()->filter('sort', '', FILTER_SANITIZE_STRING);
        if (empty($sort) || !in_array($sort, $repository->getAllowedSortingFields())) {
            $sort = $repository->getDefaultSortingField();
        }
    
        $sdir = (isset($args['sortdir']) && !empty($args['sortdir'])) ? $args['sortdir'] : $this->request->getPost()->filter('sortdir', '', FILTER_SANITIZE_STRING);
        $sdir = strtolower($sdir);
        if ($sdir != 'asc' && $sdir != 'desc') {
            $sdir = 'asc';
        }
    
        $where = ''; // filters are processed inside the repository class
        $sortParam = $sort . ' ' . $sdir;
    
        $objectData = $repository->selectWhere($where, $sortParam);
    
        $slimItems = array();
        $component = $this->name . ':' . ucwords($objectType) . ':';
        foreach ($objectData as $item) {
            $itemId = '';
            foreach ($idFields as $idField) {
                $itemId .= ((!empty($itemId)) ? '_' : '') . $item[$idField];
            }
            if (!SecurityUtil::checkPermission($component, $itemId . '::', ACCESS_READ)) {
                continue;
            }
            $slimItems[] = $this->prepareSlimItem($objectType, $item, $itemId, $titleField, $descriptionField);
        }
    
        return new Zikula_Response_Ajax($slimItems);
    }
    
    /**
     * Builds and returns a slim data array from a given entity.
     *
     * @param string $objectType       The currently treated object type.
     * @param object $item             The currently treated entity.
     * @param string $itemid           Data item identifier(s).
     * @param string $titleField       Name of item title field.
     * @param string $descriptionField Name of item description field.
     *
     * @return array The slim data representation.
     */
    protected function prepareSlimItem($objectType, $item, $itemId, $titleField, $descriptionField)
    {
        $view = Zikula_View::getInstance('MediaRepository', false);
        $view->assign($objectType, $item);
        $previewInfo = base64_encode($view->fetch('external/' . $objectType . '/info.tpl'));
    
        $title = ($titleField != '') ? $item[$titleField] : '';
        $description = ($descriptionField != '') ? $item[$descriptionField] : '';
    
        return array('id'           => $itemId,
                     'title'        => str_replace('&amp;', '&', $title),
                     'description'  => $description,
                     'previewInfo'  => $previewInfo);
    }
    
    /**
     * Searches for entities for auto completion usage.
     *
     * @param string $ot       Treated object type.
     * @param string $fragment The fragment of the entered item name.
     * @param string $exclude  Comma separated list with ids of other items (to be excluded from search).
     *
     * @return Zikula_Response_Ajax_Plain
     */
    public function getItemListAutoCompletion()
    {
        if (!SecurityUtil::checkPermission($this->name . '::Ajax', '::', ACCESS_EDIT)) {
            return true;
        }
    
        $objectType = 'medium';
        if ($this->request->isPost() && $this->request->request->has('ot')) {
            $objectType = $this->request->request->filter('ot', 'medium', FILTER_SANITIZE_STRING);
        } elseif ($this->request->isGet() && $this->request->query->has('ot')) {
            $objectType = $this->request->query->filter('ot', 'medium', FILTER_SANITIZE_STRING);
        }
        if (!in_array($objectType, MediaRepository_Util_Controller::getObjectTypes('controllerAction', array('controller' => 'ajax', 'action' => 'getItemListAutoCompletion')))) {
            $objectType = MediaRepository_Util_Controller::getDefaultObjectType('controllerAction', array('controller' => 'ajax', 'action' => 'getItemListAutoCompletion'));
        }
    
        $repository = $this->entityManager->getRepository('MediaRepository_Entity_' . ucfirst($objectType));
        $idFields = ModUtil::apiFunc($this->name, 'selection', 'getIdFields', array('ot' => $objectType));
    
        $fragment = '';
        $exclude = '';
        if ($this->request->isPost() && $this->request->request->has('fragment')) {
            $fragment = $this->request->request->get('fragment', '');
            $exclude = $this->request->request->get('exclude', '');
        } elseif ($this->request->isGet() && $this->request->query->has('fragment')) {
            $fragment = $this->request->query->get('fragment', '');
            $exclude = $this->request->query->get('exclude', '');
        }
        $exclude = ((!empty($exclude)) ? array($exclude) : array());
    
        // parameter for used sorting field
        $sort = $this->request->query->get('sort', '');
        if (empty($sort) || !in_array($sort, $repository->getAllowedSortingFields())) {
            $sort = $repository->getDefaultSortingField();
        }
        $sortParam = $sort . ' asc';
    
        $currentPage = 1;
        $resultsPerPage = 20;
    
        // get objects from database
        list($entities, $objectCount) = $repository->selectSearch($fragment, $exclude, $sortParam, $currentPage, $resultsPerPage);
    
        $out = '<ul>';
        if ((is_array($entities) || is_object($entities)) && count($entities) > 0) {
            $titleFieldName = $repository->getTitleFieldName();
            $descriptionFieldName = $repository->getDescriptionFieldName();
            $previewFieldName = $repository->getPreviewFieldName();
    
            $thumbWidth = 100;
            $thumbHeight = 80;
            foreach ($entities as $item) {
                // class="informal" --> show in dropdown, but do not copy in the input field after selection
                $itemTitle = (!empty($titleFieldName)) ? $item[$titleFieldName] : $this->__('Item');
                $itemTitleStripped = str_replace('"', '', $itemTitle);
                $itemDescription = (isset($item[$descriptionFieldName]) && !empty($item[$descriptionFieldName])) ? $item[$descriptionFieldName] : '';//$this->__('No description yet.');
                $itemId = '';
                foreach ($idFields as $idField) {
                    $itemId .= ((!empty($itemId)) ? '_' : '') . $item[$idField];
                }
                $out .= '<li id="' . $itemId . '" title="' . $itemTitleStripped . '">';
                $out .= '<div class="itemtitle">' . $itemTitle . '</div>';
                if (!empty($itemDescription)) {
                    $out .= '<div class="itemdesc informal">' . $itemDescription . '</div>';
                }
                // check for preview image
                if (!empty($previewFieldName) && !empty($item[$previewFieldName]) && isset($item[$previewFieldName . 'FullPath'])) {
                    $thumbImagePath = MediaRepository_Util_Image::getThumb($item[$previewFieldName . 'FullPath'], $thumbWidth, $thumbHeight);
                    $preview = '<img src="' . $thumbImagePath . '" width="' . $thumbWidth . '" height="' . $thumbHeight . '" alt="' . $itemTitleStripped . '" />';
                    $out .= '<div class="itempreview informal" id="itempreview' . $itemId . '">' . $preview . '</div>';
                }
                $out .= '</li>';
            }
        }
        $out .= '</ul>';
        return new Zikula_Response_Ajax_Plain($out);
    }
    
    /**
     * Checks whether a field value is a duplicate or not.
     *
     * @param string $ot       Treated object type.
     * @param string $fragment The fragment of the entered item name.
     * @param string $exclude  Comma separated list with ids of other items (to be excluded from search).
     *
     * @throws Zikula_Exception If something fatal occurs.
     *
     * @return Zikula_Response_Ajax
     */
    public function checkForDuplicate()
    {
        $this->checkAjaxToken();
        $this->throwForbiddenUnless(SecurityUtil::checkPermission($this->name . '::Ajax', '::', ACCESS_EDIT));
    
        $objectType = $this->request->request->filter('ot', 'medium', FILTER_SANITIZE_STRING);
        if (!in_array($objectType, MediaRepository_Util_Controller::getObjectTypes('controllerAction', array('controller' => 'ajax', 'action' => 'checkForDuplicate')))) {
            $objectType = MediaRepository_Util_Controller::getDefaultObjectType('controllerAction', array('controller' => 'ajax', 'action' => 'checkForDuplicate'));
        }
    
        $fieldName = $this->request->request->filter('fn', '', FILTER_SANITIZE_STRING);
        $value = $this->request->request->get('v', '');
    
        if (empty($fieldName) || empty($value)) {
            return new Zikula_Response_Ajax_BadData($this->__('Error: invalid input.'));
        }
    
        // check if the given field is existing and unique
        $uniqueFields = array();
        switch ($objectType) {
            case 'medium':
                    $uniqueFields = array('slug');
                    break;
        }
        if (!count($uniqueFields) || !in_array($fieldName, $uniqueFields)) {
            return new Zikula_Response_Ajax_BadData($this->__('Error: invalid input.'));
        }
    
        $exclude = (int) $this->request->request->filter('ex', 0, FILTER_VALIDATE_INT);
    
        $entityClass = 'MediaRepository_Entity_' . ucfirst($objectType);
        $object = new $entityClass(); 
    
        $result = false;
        switch ($objectType) {
        case 'medium':
            switch ($fieldName) {
            case 'slug':
                    $repository = $this->entityManager->getRepository($entityClass);
                    $entity = $repository->selectBySlug($value, false, $exclude);
                    $result = ($entity != null && isset($entity['slug']));
                    break;
            }
            break;
        }
    
        // return response
        return new Zikula_Response_Ajax(array('isDuplicate' => $result));
    }
    
    /**
     * Changes a given flag (boolean field) by switching between true and false.
     *
     * @param string $ot    Treated object type.
     * @param string $field The field to be toggled.
     * @param int    $id    Identifier of treated entity.
     *
     * @return Zikula_Response_Ajax
     */
    public function toggleFlag()
    {
        $this->throwForbiddenUnless(SecurityUtil::checkPermission($this->name. '::Ajax', '::', ACCESS_EDIT));
    
        $objectType = $this->request->request->filter('ot', '', FILTER_SANITIZE_STRING);
        $field = $this->request->request->filter('field', '', FILTER_SANITIZE_STRING);
        $id = (int) $this->request->request->filter('id', 0, FILTER_VALIDATE_INT);
    
        if ($id == 0
            || ($objectType != 'mediaHandler')
        || ($objectType == 'mediaHandler' && !in_array($field, array('active')))
        ) {
            return new Zikula_Response_Ajax_BadData($this->__('Error: invalid input.'));
        }
    
        // select data from data source
        $entity = ModUtil::apiFunc($this->name, 'selection', 'getEntity', array('ot' => $objectType, 'id' => $id));
        if ($entity == null) {
            return new Zikula_Response_Ajax_NotFound($this->__('No such item.'));
        }
    
        // toggle the flag
        $entity[$field] = !$entity[$field];
    
        // save entity back to database
        $this->entityManager->flush();
    
        // return response
        return new Zikula_Response_Ajax(array('id' => $id,
                                              'state' => $entity[$field]));
    }
}
