<?php
/**
 * MediaRepository.
 *
 * @copyright Axel Guckelsberger
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @package MediaRepository
 * @author Axel Guckelsberger <info@guite.de>.
 * @link http://zikula.de
 * @link http://zikula.org
 * @version Generated by ModuleStudio 0.5.5 (http://modulestudio.de) at Wed May 30 16:44:53 CEST 2012.
 */

/**
 * Installer base class
 */
class MediaRepository_Base_Installer extends Zikula_AbstractInstaller
{
    /**
     * Install the MediaRepository application.
     *
     * @return boolean True on success, or false.
     */
    public function install()
    {
        $basePath = MediaRepository_Util_Controller::getFileBaseFolder('mediaHandler', 'image');
        if (!is_dir($basePath)) {
            return LogUtil::registerError($this->__f('The upload folder "%s" does not exist. Please create it before installing this application.', array($basePath)));
        }
        if (!is_writable($basePath)) {
            return LogUtil::registerError($this->__f('The upload folder "%s" is not writable. Please change permissions accordingly before installing this application.', array($basePath)));
        }
        $basePath = MediaRepository_Util_Controller::getFileBaseFolder('medium', 'fileUpload');
        if (!is_dir($basePath)) {
            return LogUtil::registerError($this->__f('The upload folder "%s" does not exist. Please create it before installing this application.', array($basePath)));
        }
        if (!is_writable($basePath)) {
            return LogUtil::registerError($this->__f('The upload folder "%s" is not writable. Please change permissions accordingly before installing this application.', array($basePath)));
        }
        // create all tables from according entity definitions
        try {
            DoctrineHelper::createSchema($this->entityManager, $this->listEntityClasses());
        } catch (Exception $e) {
            if (System::isDevelopmentMode()) {
                LogUtil::registerError($this->__('Doctrine Exception: ') . $e->getMessage());
            }
            return LogUtil::registerError($this->__f('An error was encountered while creating the tables for the %s module.', array($this->getName())));
        }
    
        // set up all our vars with initial values
        $this->setVar('pageSize', 20);
        $this->setVar('uiMode', 1);
        $this->setVar('useAccountArea', true);
        $this->setVar('apiKeyFlickr', '');
        $this->setVar('apiKeyPicasa', '');
        $this->setVar('apiKeySmugMug', '');
    
        // create the default data for MediaRepository
        $this->createDefaultData();
    
        // add entries to category registry
        $rootcat = CategoryUtil::getCategoryByPath('/__SYSTEM__/Modules/Global');
        CategoryRegistryUtil::insertEntry('MediaRepository', 'Repository', 'Main', $rootcat['id']);
        CategoryRegistryUtil::insertEntry('MediaRepository', 'Medium', 'Main', $rootcat['id']);
    
        // register persistent event handlers
        $this->registerPersistentEventHandlers();
    
        // register hook subscriber bundles
        HookUtil::registerSubscriberBundles($this->version->getHookSubscriberBundles());
        
    
        // initialisation successful
        return true;
    }
    
    /**
     * Upgrade the MediaRepository application from an older version.
     *
     * If the upgrade fails at some point, it returns the last upgraded version.
     *
     * @param integer $oldVersion Version to upgrade from.
     *
     * @return boolean True on success, false otherwise.
     */
    public function upgrade($oldVersion)
    {
    /*
        // Upgrade dependent on old version number
        switch ($oldVersion) {
            case 1.0.0:
                // do something
                // ...
                // update the database schema
                try {
                    DoctrineHelper::updateSchema($this->entityManager, $this->listEntityClasses());
                } catch (Exception $e) {
                    if (System::isDevelopmentMode()) {
                        LogUtil::registerError($this->__('Doctrine Exception: ') . $e->getMessage());
                    }
                    return LogUtil::registerError($this->__f('An error was encountered while dropping the tables for the %s module.', array($this->getName())));
                }
        }
    */
    
        // update successful
        return true;
    }
    
    /**
     * Uninstall MediaRepository.
     *
     * @return boolean True on success, false otherwise.
     */
    public function uninstall()
    {
        // delete stored object workflows
        $result = Zikula_Workflow_Util::deleteWorkflowsForModule($this->getName());
        if ($result === false) {
            return LogUtil::registerError($this->__f('An error was encountered while removing stored object workflows for the %s module.', array($this->getName())));
        }
    
        try {
            DoctrineHelper::dropSchema($this->entityManager, $this->listEntityClasses());
        } catch (Exception $e) {
            if (System::isDevelopmentMode()) {
                LogUtil::registerError($this->__('Doctrine Exception: ') . $e->getMessage());
            }
            return LogUtil::registerError($this->__f('An error was encountered while dropping the tables for the %s module.', array($this->getName())));
        }
    
        // unregister persistent event handlers
        EventUtil::unregisterPersistentModuleHandlers('MediaRepository');
    
        // unregister hook subscriber bundles
        HookUtil::unregisterSubscriberBundles($this->version->getHookSubscriberBundles());
        
    
        // remove all module vars
        $this->delVars();
    
        // remove category registry entries
        ModUtil::dbInfoLoad('Categories');
        DBUtil::deleteWhere('categories_registry', "modname = 'MediaRepository'");
    
        // deletion successful
        return true;
    }
    
    /**
     * Build array with all entity classes for MediaRepository.
     *
     * @return array list of class names.
     */
    protected function listEntityClasses()
    {
        $classNames = array();
        $classNames[] = 'MediaRepository_Entity_Repository';
        $classNames[] = 'MediaRepository_Entity_RepositoryCategory';
        $classNames[] = 'MediaRepository_Entity_MediaHandler';
        $classNames[] = 'MediaRepository_Entity_Medium';
        $classNames[] = 'MediaRepository_Entity_MediumMetaData';
        $classNames[] = 'MediaRepository_Entity_MediumAttribute';
        $classNames[] = 'MediaRepository_Entity_MediumCategory';
        $classNames[] = 'MediaRepository_Entity_ThumbSize';
    
        return $classNames;
    }
    
    /**
     * Create the default data for MediaRepository.
     *
     * @return void
     */
    protected function createDefaultData()
    {
        // Ensure that tables are cleared
        $this->entityManager->transactional(function($entityManager) {
            $entityManager->getRepository('MediaRepository_Entity_Repository')->truncateTable();
            $entityManager->getRepository('MediaRepository_Entity_MediaHandler')->truncateTable();
            $entityManager->getRepository('MediaRepository_Entity_Medium')->truncateTable();
            $entityManager->getRepository('MediaRepository_Entity_ThumbSize')->truncateTable();
        });
    }
    
    /**
     * Register persistent event handlers.
     * These are listeners for external events of the core and other modules.
     */
    protected function registerPersistentEventHandlers()
    {
        // core -> 
        EventUtil::registerPersistentModuleHandler('MediaRepository', 'api.method_not_found', array('MediaRepository_Listener_Core', 'apiMethodNotFound'));
        EventUtil::registerPersistentModuleHandler('MediaRepository', 'core.preinit', array('MediaRepository_Listener_Core', 'preInit'));
        EventUtil::registerPersistentModuleHandler('MediaRepository', 'core.init', array('MediaRepository_Listener_Core', 'init'));
        EventUtil::registerPersistentModuleHandler('MediaRepository', 'core.postinit', array('MediaRepository_Listener_Core', 'postInit'));
        EventUtil::registerPersistentModuleHandler('MediaRepository', 'controller.method_not_found', array('MediaRepository_Listener_Core', 'controllerMethodNotFound'));
    
        // installer -> MediaRepository_Listener_Installer
        EventUtil::registerPersistentModuleHandler('MediaRepository', 'installer.module.installed', array('MediaRepository_Listener_Installer', 'moduleInstalled'));
        EventUtil::registerPersistentModuleHandler('MediaRepository', 'installer.module.upgraded', array('MediaRepository_Listener_Installer', 'moduleUpgraded'));
        EventUtil::registerPersistentModuleHandler('MediaRepository', 'installer.module.uninstalled', array('MediaRepository_Listener_Installer', 'moduleUninstalled'));
        EventUtil::registerPersistentModuleHandler('MediaRepository', 'installer.subscriberarea.uninstalled', array('MediaRepository_Listener_Installer', 'subscriberAreaUninstalled'));
    
        // modules -> MediaRepository_Listener_ModuleDispatch
        EventUtil::registerPersistentModuleHandler('MediaRepository', 'module_dispatch.postloadgeneric', array('MediaRepository_Listener_ModuleDispatch', 'postLoadGeneric'));
        EventUtil::registerPersistentModuleHandler('MediaRepository', 'module_dispatch.preexecute', array('MediaRepository_Listener_ModuleDispatch', 'preExecute'));
        EventUtil::registerPersistentModuleHandler('MediaRepository', 'module_dispatch.postexecute', array('MediaRepository_Listener_ModuleDispatch', 'postExecute'));
        EventUtil::registerPersistentModuleHandler('MediaRepository', 'module_dispatch.custom_classname', array('MediaRepository_Listener_ModuleDispatch', 'customClassname'));
    
        // mailer -> MediaRepository_Listener_Mailer
        EventUtil::registerPersistentModuleHandler('MediaRepository', 'module.mailer.api.sendmessage', array('MediaRepository_Listener_Mailer', 'sendMessage'));
    
        // page -> MediaRepository_Listener_Page
        EventUtil::registerPersistentModuleHandler('MediaRepository', 'pageutil.addvar_filter', array('MediaRepository_Listener_Page', 'pageutilAddvarFilter'));
        EventUtil::registerPersistentModuleHandler('MediaRepository', 'system.outputfilter', array('MediaRepository_Listener_Page', 'systemOutputfilter'));
    
        // errors -> MediaRepository_Listener_Errors
        EventUtil::registerPersistentModuleHandler('MediaRepository', 'setup.errorreporting', array('MediaRepository_Listener_Errors', 'setupErrorReporting'));
        EventUtil::registerPersistentModuleHandler('MediaRepository', 'systemerror', array('MediaRepository_Listener_Errors', 'systemError'));
    
        // theme -> MediaRepository_Listener_Theme
        EventUtil::registerPersistentModuleHandler('MediaRepository', 'theme.preinit', array('MediaRepository_Listener_Theme', 'preInit'));
        EventUtil::registerPersistentModuleHandler('MediaRepository', 'theme.init', array('MediaRepository_Listener_Theme', 'init'));
        EventUtil::registerPersistentModuleHandler('MediaRepository', 'theme.load_config', array('MediaRepository_Listener_Theme', 'loadConfig'));
        EventUtil::registerPersistentModuleHandler('MediaRepository', 'theme.prefetch', array('MediaRepository_Listener_Theme', 'preFetch'));
        EventUtil::registerPersistentModuleHandler('MediaRepository', 'theme.postfetch', array('MediaRepository_Listener_Theme', 'postFetch'));
    
        // view -> MediaRepository_Listener_View
        EventUtil::registerPersistentModuleHandler('MediaRepository', 'view.init', array('MediaRepository_Listener_View', 'init'));
        EventUtil::registerPersistentModuleHandler('MediaRepository', 'view.postfetch', array('MediaRepository_Listener_View', 'postFetch'));
    
        // user login -> MediaRepository_Listener_UserLogin
        EventUtil::registerPersistentModuleHandler('MediaRepository', 'module.users.ui.login.started', array('MediaRepository_Listener_UserLogin', 'started'));
        EventUtil::registerPersistentModuleHandler('MediaRepository', 'module.users.ui.login.veto', array('MediaRepository_Listener_UserLogin', 'veto'));
        EventUtil::registerPersistentModuleHandler('MediaRepository', 'module.users.ui.login.succeeded', array('MediaRepository_Listener_UserLogin', 'succeeded'));
        EventUtil::registerPersistentModuleHandler('MediaRepository', 'module.users.ui.login.failed', array('MediaRepository_Listener_UserLogin', 'failed'));
    
        // user logout -> MediaRepository_Listener_UserLogout
        EventUtil::registerPersistentModuleHandler('MediaRepository', 'module.users.ui.logout.succeeded', array('MediaRepository_Listener_UserLogout', 'succeeded'));
    
        // user -> MediaRepository_Listener_User
        EventUtil::registerPersistentModuleHandler('MediaRepository', 'user.gettheme', array('MediaRepository_Listener_User', 'getTheme'));
        EventUtil::registerPersistentModuleHandler('MediaRepository', 'user.account.create', array('MediaRepository_Listener_User', 'create'));
        EventUtil::registerPersistentModuleHandler('MediaRepository', 'user.account.update', array('MediaRepository_Listener_User', 'update'));
        EventUtil::registerPersistentModuleHandler('MediaRepository', 'user.account.delete', array('MediaRepository_Listener_User', 'delete'));
    
        // registration -> MediaRepository_Listener_UserRegistration
        EventUtil::registerPersistentModuleHandler('MediaRepository', 'module.users.ui.registration.started', array('MediaRepository_Listener_UserRegistration', 'started'));
        EventUtil::registerPersistentModuleHandler('MediaRepository', 'module.users.ui.registration.succeeded', array('MediaRepository_Listener_UserRegistration', 'succeeded'));
        EventUtil::registerPersistentModuleHandler('MediaRepository', 'module.users.ui.registration.failed', array('MediaRepository_Listener_UserRegistration', 'failed'));
        EventUtil::registerPersistentModuleHandler('MediaRepository', 'user.registration.create', array('MediaRepository_Listener_UserRegistration', 'create'));
        EventUtil::registerPersistentModuleHandler('MediaRepository', 'user.registration.update', array('MediaRepository_Listener_UserRegistration', 'update'));
        EventUtil::registerPersistentModuleHandler('MediaRepository', 'user.registration.delete', array('MediaRepository_Listener_UserRegistration', 'delete'));
    
        // users module -> MediaRepository_Listener_Users
        EventUtil::registerPersistentModuleHandler('MediaRepository', 'module.users.config.updated', array('MediaRepository_Listener_Users', 'configUpdated'));
    
        // group -> MediaRepository_Listener_Group
        EventUtil::registerPersistentModuleHandler('MediaRepository', 'group.create', array('MediaRepository_Listener_Group', 'create'));
        EventUtil::registerPersistentModuleHandler('MediaRepository', 'group.update', array('MediaRepository_Listener_Group', 'update'));
        EventUtil::registerPersistentModuleHandler('MediaRepository', 'group.delete', array('MediaRepository_Listener_Group', 'delete'));
        EventUtil::registerPersistentModuleHandler('MediaRepository', 'group.adduser', array('MediaRepository_Listener_Group', 'addUser'));
        EventUtil::registerPersistentModuleHandler('MediaRepository', 'group.removeuser', array('MediaRepository_Listener_Group', 'removeUser'));
    
        // special purposes and 3rd party api support -> MediaRepository_Listener_ThirdParty
        EventUtil::registerPersistentModuleHandler('MediaRepository', 'get.pending_content', array('MediaRepository_Listener_ThirdParty', 'pendingContentListener'));
        EventUtil::registerPersistentModuleHandler('MediaRepository', 'module.content.gettypes', array('MediaRepository_Listener_ThirdParty', 'contentGetTypes'));
    }
}
