<?php
/**
 * MediaRepository.
 *
 * @copyright Axel Guckelsberger
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @package MediaRepository
 * @author Axel Guckelsberger <info@guite.de>.
 * @link http://zikula.de
 * @link http://zikula.org
 * @version Generated by ModuleStudio 0.5.5 (http://modulestudio.de) at Fri Jun 22 18:45:34 CEST 2012.
 */

/**
 * Version information base class.
 */
class MediaRepository_Base_Version extends Zikula_AbstractVersion
{
    /**
     * Retrieves meta data information for this application.
     *
     * @return array List of meta data.
     */
    public function getMetaData()
    {
        $meta = array();
        // the current module version
        $meta['version']              = '1.0.0';
        // the displayed name of the module
        $meta['displayname']          = $this->__('MediaRepository');
        // the module description
        $meta['description']          = $this->__('The Media Repository module provides comprehensive means for file and media managing as well as powerful integration capabilities. It is the successor of several older modules, including Mediashare, MediaAttach, Downloads and other ones.');
        //! url version of name, should be in lowercase without space
        $meta['url']                  = $this->__('mediarepository');
        // core requirement
        $meta['core_min']             = '1.3.2'; // requires minimum 1.3.2 or later
        $meta['core_max']             = '1.3.99'; // not ready for 1.4.0 yet

        // define special capabilities of this module
        $meta['capabilities'] = array(
                          HookUtil::SUBSCRIBER_CAPABLE => array('enabled' => true)
/*,
                          HookUtil::PROVIDER_CAPABLE => array('enabled' => true), // TODO: see #15
                          'authentication' => array('version' => '1.0'),
                          'profile'        => array('version' => '1.0', 'anotherkey' => 'anothervalue'),
                          'message'        => array('version' => '1.0', 'anotherkey' => 'anothervalue')
*/
        );

        // permission schema
        $meta['securityschema'] = array(
            'MediaRepository::' => '::',
            'MediaRepository::Ajax' => '::',
            'MediaRepository:ItemListBlock:' => 'Block title::',
            'MediaRepository:Repository:' => 'Repository ID::',
            'MediaRepository:MediaHandler:' => 'MediaHandler ID::',
            'MediaRepository:Medium:MediaHandler' => 'Medium ID:MediaHandler ID:',
            'MediaRepository:Medium:' => 'Medium ID::',
            'MediaRepository:Repository:Medium' => 'Repository ID:Medium ID:',
            'MediaRepository:ThumbSize:' => 'ThumbSize ID::',
            'MediaRepository:Repository:ThumbSize' => 'Repository ID:ThumbSize ID:',
        );
        // DEBUG: permission schema aspect ends


        return $meta;
    }

    /**
     * Define hook subscriber bundles.
     */
    protected function setupHookBundles()
    {
        
        $bundle = new Zikula_HookManager_SubscriberBundle($this->name, 'subscriber.mediarepository.ui_hooks.repositories', 'ui_hooks', __('mediarepository Repositories Display Hooks'));
        
        // Display hook for view/display templates.
        $bundle->addEvent('display_view', 'mediarepository.ui_hooks.repositories.display_view');
        // Display hook for create/edit forms.
        $bundle->addEvent('form_edit', 'mediarepository.ui_hooks.repositories.form_edit');
        // Display hook for delete dialogues.
        $bundle->addEvent('form_delete', 'mediarepository.ui_hooks.repositories.form_delete');
        // Validate input from an ui create/edit form.
        $bundle->addEvent('validate_edit', 'mediarepository.ui_hooks.repositories.validate_edit');
        // Validate input from an ui create/edit form (generally not used).
        $bundle->addEvent('validate_delete', 'mediarepository.ui_hooks.repositories.validate_delete');
        // Perform the final update actions for a ui create/edit form.
        $bundle->addEvent('process_edit', 'mediarepository.ui_hooks.repositories.process_edit');
        // Perform the final delete actions for a ui form.
        $bundle->addEvent('process_delete', 'mediarepository.ui_hooks.repositories.process_delete');
        $this->registerHookSubscriberBundle($bundle);

        $bundle = new Zikula_HookManager_SubscriberBundle($this->name, 'subscriber.mediarepository.filter_hooks.repositories', 'filter_hooks', __('mediarepository Repositories Filter Hooks'));
        // A filter applied to the given area.
        $bundle->addEvent('filter', 'mediarepository.filter_hooks.repositories.filter');
        $this->registerHookSubscriberBundle($bundle);
        
        $bundle = new Zikula_HookManager_SubscriberBundle($this->name, 'subscriber.mediarepository.ui_hooks.mediahandlers', 'ui_hooks', __('mediarepository Media handlers Display Hooks'));
        
        // Display hook for view/display templates.
        $bundle->addEvent('display_view', 'mediarepository.ui_hooks.mediahandlers.display_view');
        // Display hook for create/edit forms.
        $bundle->addEvent('form_edit', 'mediarepository.ui_hooks.mediahandlers.form_edit');
        // Display hook for delete dialogues.
        $bundle->addEvent('form_delete', 'mediarepository.ui_hooks.mediahandlers.form_delete');
        // Validate input from an ui create/edit form.
        $bundle->addEvent('validate_edit', 'mediarepository.ui_hooks.mediahandlers.validate_edit');
        // Validate input from an ui create/edit form (generally not used).
        $bundle->addEvent('validate_delete', 'mediarepository.ui_hooks.mediahandlers.validate_delete');
        // Perform the final update actions for a ui create/edit form.
        $bundle->addEvent('process_edit', 'mediarepository.ui_hooks.mediahandlers.process_edit');
        // Perform the final delete actions for a ui form.
        $bundle->addEvent('process_delete', 'mediarepository.ui_hooks.mediahandlers.process_delete');
        $this->registerHookSubscriberBundle($bundle);

        $bundle = new Zikula_HookManager_SubscriberBundle($this->name, 'subscriber.mediarepository.filter_hooks.mediahandlers', 'filter_hooks', __('mediarepository Media handlers Filter Hooks'));
        // A filter applied to the given area.
        $bundle->addEvent('filter', 'mediarepository.filter_hooks.mediahandlers.filter');
        $this->registerHookSubscriberBundle($bundle);
        
        $bundle = new Zikula_HookManager_SubscriberBundle($this->name, 'subscriber.mediarepository.ui_hooks.media', 'ui_hooks', __('mediarepository Media Display Hooks'));
        
        // Display hook for view/display templates.
        $bundle->addEvent('display_view', 'mediarepository.ui_hooks.media.display_view');
        // Display hook for create/edit forms.
        $bundle->addEvent('form_edit', 'mediarepository.ui_hooks.media.form_edit');
        // Display hook for delete dialogues.
        $bundle->addEvent('form_delete', 'mediarepository.ui_hooks.media.form_delete');
        // Validate input from an ui create/edit form.
        $bundle->addEvent('validate_edit', 'mediarepository.ui_hooks.media.validate_edit');
        // Validate input from an ui create/edit form (generally not used).
        $bundle->addEvent('validate_delete', 'mediarepository.ui_hooks.media.validate_delete');
        // Perform the final update actions for a ui create/edit form.
        $bundle->addEvent('process_edit', 'mediarepository.ui_hooks.media.process_edit');
        // Perform the final delete actions for a ui form.
        $bundle->addEvent('process_delete', 'mediarepository.ui_hooks.media.process_delete');
        $this->registerHookSubscriberBundle($bundle);

        $bundle = new Zikula_HookManager_SubscriberBundle($this->name, 'subscriber.mediarepository.filter_hooks.media', 'filter_hooks', __('mediarepository Media Filter Hooks'));
        // A filter applied to the given area.
        $bundle->addEvent('filter', 'mediarepository.filter_hooks.media.filter');
        $this->registerHookSubscriberBundle($bundle);
        
        $bundle = new Zikula_HookManager_SubscriberBundle($this->name, 'subscriber.mediarepository.ui_hooks.thumbsizes', 'ui_hooks', __('mediarepository Thumb sizes Display Hooks'));
        
        // Display hook for view/display templates.
        $bundle->addEvent('display_view', 'mediarepository.ui_hooks.thumbsizes.display_view');
        // Display hook for create/edit forms.
        $bundle->addEvent('form_edit', 'mediarepository.ui_hooks.thumbsizes.form_edit');
        // Display hook for delete dialogues.
        $bundle->addEvent('form_delete', 'mediarepository.ui_hooks.thumbsizes.form_delete');
        // Validate input from an ui create/edit form.
        $bundle->addEvent('validate_edit', 'mediarepository.ui_hooks.thumbsizes.validate_edit');
        // Validate input from an ui create/edit form (generally not used).
        $bundle->addEvent('validate_delete', 'mediarepository.ui_hooks.thumbsizes.validate_delete');
        // Perform the final update actions for a ui create/edit form.
        $bundle->addEvent('process_edit', 'mediarepository.ui_hooks.thumbsizes.process_edit');
        // Perform the final delete actions for a ui form.
        $bundle->addEvent('process_delete', 'mediarepository.ui_hooks.thumbsizes.process_delete');
        $this->registerHookSubscriberBundle($bundle);

        $bundle = new Zikula_HookManager_SubscriberBundle($this->name, 'subscriber.mediarepository.filter_hooks.thumbsizes', 'filter_hooks', __('mediarepository Thumb sizes Filter Hooks'));
        // A filter applied to the given area.
        $bundle->addEvent('filter', 'mediarepository.filter_hooks.thumbsizes.filter');
        $this->registerHookSubscriberBundle($bundle);

        
    }
}
