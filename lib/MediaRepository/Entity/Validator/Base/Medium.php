<?php
/**
 * MediaRepository.
 *
 * @copyright Axel Guckelsberger
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @package MediaRepository
 * @author Axel Guckelsberger <info@guite.de>.
 * @link http://zikula.de
 * @link http://zikula.org
 * @version Generated by ModuleStudio 0.5.5 (http://modulestudio.de) at Wed May 30 16:44:53 CEST 2012.
 */

/**
 * Validator class for encapsulating entity validation methods.
 *
 * This is the base validation class for medium entities.
 */
class MediaRepository_Entity_Validator_Base_Medium extends MediaRepository_Validator
{
    /**
     * Performs all validation rules.
     *
     * @return mixed either array with error information or true on success
     */
    public function validateAll()
    {
        $errorInfo = array('message' => '', 'code' => 0, 'debugArray' => array());
        $dom = ZLanguage::getModuleDomain('MediaRepository');
        if (!$this->isValidInteger('owner')) {
            $errorInfo['message'] = __f('Error! Field value may only contain digits (%s).', array('owner'), $dom);
            return $errorInfo;
        }
        if (!$this->isNumberNotEmpty('owner')) {
            $errorInfo['message'] = __f('Error! Field value must not be 0 (%s).', array('owner'), $dom);
            return $errorInfo;
        }
        if (!$this->isValidUser('owner')) {
            $errorInfo['message'] = __f('Error! Field value must be a valid user id (%s).', array('owner'), $dom);
            return $errorInfo;
        }
        if (!$this->isStringNotLongerThan('title', 255)) {
            $errorInfo['message'] = __f('Error! Length of field value must not be higher than %2$s (%1$s).', array('title', 255), $dom);
            return $errorInfo;
        }
        if (!$this->isStringNotEmpty('title')) {
            $errorInfo['message'] = __f('Error! Field value must not be empty (%s).', array('title'), $dom);
            return $errorInfo;
        }
        if (!$this->isStringNotLongerThan('keywords', 255)) {
            $errorInfo['message'] = __f('Error! Length of field value must not be higher than %2$s (%1$s).', array('keywords', 255), $dom);
            return $errorInfo;
        }
        if (!$this->isStringNotLongerThan('description', 2000)) {
            $errorInfo['message'] = __f('Error! Length of field value must not be higher than %2$s (%1$s).', array('description', 2000), $dom);
            return $errorInfo;
        }
        if (!$this->isStringNotLongerThan('description2', 2000)) {
            $errorInfo['message'] = __f('Error! Length of field value must not be higher than %2$s (%1$s).', array('description2', 2000), $dom);
            return $errorInfo;
        }
        if (!$this->isStringNotLongerThan('dateTaken', 255)) {
            $errorInfo['message'] = __f('Error! Length of field value must not be higher than %2$s (%1$s).', array('dateTaken', 255), $dom);
            return $errorInfo;
        }
        if (!$this->isStringNotLongerThan('placeTaken', 2000)) {
            $errorInfo['message'] = __f('Error! Length of field value must not be higher than %2$s (%1$s).', array('placeTaken', 2000), $dom);
            return $errorInfo;
        }
        if (!$this->isStringNotLongerThan('notes', 2000)) {
            $errorInfo['message'] = __f('Error! Length of field value must not be higher than %2$s (%1$s).', array('notes', 2000), $dom);
            return $errorInfo;
        }
        if (!$this->isStringNotLongerThan('license', 2000)) {
            $errorInfo['message'] = __f('Error! Length of field value must not be higher than %2$s (%1$s).', array('license', 2000), $dom);
            return $errorInfo;
        }
        if (!$this->isStringNotLongerThan('areamap', 2000)) {
            $errorInfo['message'] = __f('Error! Length of field value must not be higher than %2$s (%1$s).', array('areamap', 2000), $dom);
            return $errorInfo;
        }
        if (!$this->isValidBoolean('showLocation')) {
            $errorInfo['message'] = __f('Error! Field value must be a valid boolean (%s).', array('showLocation'), $dom);
            return $errorInfo;
        }
        if (!$this->isValidNumber('latitude')) {
            $errorInfo['message'] = __f('Error! Field value must be numeric (%s).', array('latitude'), $dom);
            return $errorInfo;
        }
        if (!$this->isNumberNotLongerThan('latitude', 17)) {
            $errorInfo['message'] = __f('Error! Length of field value must not be higher than %2$s (%1$s).', array('latitude', 17), $dom);
            return $errorInfo;
        }
        if (!$this->isValidNumber('longitude')) {
            $errorInfo['message'] = __f('Error! Field value must be numeric (%s).', array('longitude'), $dom);
            return $errorInfo;
        }
        if (!$this->isNumberNotLongerThan('longitude', 17)) {
            $errorInfo['message'] = __f('Error! Length of field value must not be higher than %2$s (%1$s).', array('longitude', 17), $dom);
            return $errorInfo;
        }
        if (!$this->isValidInteger('zoomFactor')) {
            $errorInfo['message'] = __f('Error! Field value may only contain digits (%s).', array('zoomFactor'), $dom);
            return $errorInfo;
        }
        if (!$this->isNumberNotLongerThan('zoomFactor', 4)) {
            $errorInfo['message'] = __f('Error! Length of field value must not be higher than %2$s (%1$s).', array('zoomFactor', 4), $dom);
            return $errorInfo;
        }
        if (!$this->isValidInteger('dlcount')) {
            $errorInfo['message'] = __f('Error! Field value may only contain digits (%s).', array('dlcount'), $dom);
            return $errorInfo;
        }
        if (!$this->isNumberNotLongerThan('dlcount', 11)) {
            $errorInfo['message'] = __f('Error! Length of field value must not be higher than %2$s (%1$s).', array('dlcount', 11), $dom);
            return $errorInfo;
        }
        if (!$this->isStringNotLongerThan('url', 255)) {
            $errorInfo['message'] = __f('Error! Length of field value must not be higher than %2$s (%1$s).', array('url', 255), $dom);
            return $errorInfo;
        }
        if ($this->entity['url'] != '' && !$this->isValidUrl('url')) {
            $errorInfo['message'] = __f('Error! Field value must be a valid url (%s).', array('url'), $dom);
            return $errorInfo;
        }
        if (!$this->isStringNotLongerThan('mediaHandler', 50)) {
            $errorInfo['message'] = __f('Error! Length of field value must not be higher than %2$s (%1$s).', array('mediaHandler', 50), $dom);
            return $errorInfo;
        }
        if (!$this->isValidInteger('freeType')) {
            $errorInfo['message'] = __f('Error! Field value may only contain digits (%s).', array('freeType'), $dom);
            return $errorInfo;
        }
        if (!$this->isNumberNotLongerThan('freeType', 4)) {
            $errorInfo['message'] = __f('Error! Length of field value must not be higher than %2$s (%1$s).', array('freeType', 4), $dom);
            return $errorInfo;
        }
        if (!$this->isStringNotLongerThan('fileUpload', 255)) {
            $errorInfo['message'] = __f('Error! Length of field value must not be higher than %2$s (%1$s).', array('fileUpload', 255), $dom);
            return $errorInfo;
        }
        if (!$this->isStringNotEmpty('fileUpload')) {
            $errorInfo['message'] = __f('Error! Field value must not be empty (%s).', array('fileUpload'), $dom);
            return $errorInfo;
        }
        
        return true;
    }
    
    /**
     * Check for unique values.
     *
     * This method determines if there already exist media with the same medium.
     *
     * @param string $fieldName The name of the property to be checked
     * @return boolean result of this check, true if the given medium does not already exist
     */
    public function isUniqueValue($fieldName)
    {
        if (empty($this->entity[$fieldName])) {
            return false;
        }
    
        $serviceManager = ServiceUtil::getManager();
        $entityManager = $serviceManager->getService('doctrine.entitymanager');
        $repository = $entityManager->getRepository('MediaRepository_Entity_Medium');
    
        $excludeid = $this->entity['id'];
        return $repository->detectUniqueState($fieldName, $this->entity[$fieldName], $excludeid);
    }
    /**
     * Check for unique slug values.
     *
     * This method determines if there already exist media with the same slug.
     *
     * @return boolean result of this check, true if the given slug does not already exist
     */
    public function isUniqueSlug()
    {
        $value = $this->entity['slug'];
        if (empty($value)) {
            return false;
        }
    
        $serviceManager = ServiceUtil::getManager();
        $entityManager = $serviceManager->getService('doctrine.entitymanager');
        $repository = $entityManager->getRepository('MediaRepository_Entity_Medium');
    
        $excludeid = $this->entity['id'];
        return $repository->detectUniqueState('slug', $value, $excludeid);
    }
    
    /**
     * Get entity.
     *
     * @return Zikula_EntityAccess
     */
    public function getEntity()
    {
        return $this->entity;
    }
    
    /**
     * Set entity.
     *
     * @param Zikula_EntityAccess $entity.
     *
     * @return void
     */
    public function setEntity(Zikula_EntityAccess $entity = null)
    {
        $this->entity = $entity;
    }
    
}
