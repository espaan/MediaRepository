<?php
/**
 * MediaRepository.
 *
 * @copyright Axel Guckelsberger
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @package MediaRepository
 * @author Axel Guckelsberger <info@guite.de>.
 * @link http://zikula.de
 * @link http://zikula.org
 * @version Generated by ModuleStudio 0.5.5 (http://modulestudio.de) at Wed May 30 16:44:53 CEST 2012.
 */

use Doctrine\ORM\Mapping as ORM;
use Doctrine\Common\Collections\ArrayCollection;
use Gedmo\Mapping\Annotation as Gedmo;
use DoctrineExtensions\StandardFields\Mapping\Annotation as ZK;

/**
 * Entity class that defines the entity structure and behaviours.
 *
 * This is the base entity class for medium entities.
 *
 * @abstract
 */
abstract class MediaRepository_Entity_Base_Medium extends Zikula_EntityAccess
{
    /**
     * @var string The tablename this object maps to
     */
    protected $_objectType = 'medium';
    
    /**
     * @var array List of primary key field names
     */
    protected $_idFields = array();
    
    /**
     * @var MediaRepository_Entity_Validator_Medium The validator for this entity
     */
    protected $_validator = null;
    
    /**
     * @var boolean Whether this entity supports unique slugs
     */
    protected $_hasUniqueSlug = false;
    
    /**
     * @var array List of available item actions
     */
    protected $_actions = array();
    
    /**
     * @ORM\Id
     * @ORM\GeneratedValue
     * @ORM\Column(type="integer", unique=true)
     * @var integer $id.
     */
    protected $id = 0;
    
    /**
     * @ORM\Column(type="bigint")
     * @var bigint $owner.
     */
    protected $owner = 0;
    
    /**
     * @Gedmo\Sluggable(slugField="slug", position=1)
     * @ORM\Column(length=255)
     * @var string $title.
     */
    protected $title = '';
    
    /**
     * @ORM\Column(length=255)
     * @var string $keywords.
     */
    protected $keywords = '';
    
    /**
     * @ORM\Column(type="string", length=2000)
     * @var string $description.
     */
    protected $description = '';
    
    /**
     * @ORM\Column(type="string", length=2000)
     * @var string $description2.
     */
    protected $description2 = '';
    
    /**
     * @ORM\Column(length=255)
     * @var string $dateTaken.
     */
    protected $dateTaken = '';
    
    /**
     * @ORM\Column(type="string", length=2000)
     * @var string $placeTaken.
     */
    protected $placeTaken = '';
    
    /**
     * @ORM\Column(type="string", length=2000)
     * @var string $notes.
     */
    protected $notes = '';
    
    /**
     * @ORM\Column(type="string", length=2000)
     * @var string $license.
     */
    protected $license = '';
    
    /**
     * @ORM\Column(type="string", length=2000)
     * @var string $areamap.
     */
    protected $areamap = '';
    
    /**
     * @ORM\Column(type="boolean")
     * @var boolean $showLocation.
     */
    protected $showLocation = false;
    
    /**
     * @ORM\Column(type="decimal", precision=10, scale=7)
     * @var decimal $latitude.
     */
    protected $latitude = 0.00;
    
    /**
     * @ORM\Column(type="decimal", precision=10, scale=7)
     * @var decimal $longitude.
     */
    protected $longitude = 0.00;
    
    /**
     * @ORM\Column(type="smallint")
     * @var smallint $zoomFactor.
     */
    protected $zoomFactor = 9;
    
    /**
     * @ORM\Column(type="array")
     * @var array $settings.
     */
    protected $settings = array();
    
    /**
     * @ORM\Column(type="bigint")
     * @var bigint $dlcount.
     */
    protected $dlcount = 0;
    
    /**
     * @ORM\Column(length=255)
     * @var string $url.
     */
    protected $url = '';
    
    /**
     * @ORM\Column(length=50)
     * @var string $mediaHandler.
     */
    protected $mediaHandler = '';
    
    /**
     * @ORM\Column(type="smallint")
     * @var smallint $freeType.
     */
    protected $freeType = 0;
    
    /**
     * @ORM\Column(type="array")
     * @var array $additions.
     */
    protected $additions = array();
    
    /**
     * File upload meta data array.
     *
     * @ORM\Column(type="array")
     * @var array $fileUploadMeta.
     */
    protected $fileUploadMeta = array();
    
    /**
     * @ORM\Column(length=255)
     * @var string $fileUpload.
     */
    protected $fileUpload = '';
    
    
    /**
     * The full path to the file upload.
     *
     * @var string $fileUploadFullPath.
     */
    protected $fileUploadFullPath = '';
    
    /**
     * Full file upload path as url.
     *
     * @var string $fileUploadFullPathUrl.
     */
    protected $fileUploadFullPathUrl = '';
    
    /**
     * @Gedmo\Slug(style="default", separator="-")
     * @ORM\Column(type="string", length=255)
     * @var string $slug.
     */
    protected $slug;
    
    /**
     * @ORM\OneToOne(targetEntity="MediaRepository_Entity_MediumMetaData", 
     *               mappedBy="entity", cascade={"all"},
     *               orphanRemoval=true)
     * @var MediaRepository_Entity_MediumMetaData
     */
    protected $metadata;
    
    /**
     * @ORM\OneToMany(targetEntity="MediaRepository_Entity_MediumAttribute", 
     *                mappedBy="entity", cascade={"all"}, 
     *                orphanRemoval=true, indexBy="name")
     * @var MediaRepository_Entity_MediumAttribute
     */
    protected $attributes;
    
    /**
     * @ORM\OneToMany(targetEntity="MediaRepository_Entity_MediumCategory", 
     *                mappedBy="entity", cascade={"all"}, 
     *                orphanRemoval=true, indexBy="categoryRegistryId")
     * @var MediaRepository_Entity_MediumCategory
     */
    protected $categories;
    
    /**
     * @ORM\Column(type="integer")
     * @ZK\StandardFields(type="userid", on="create")
     * @var integer $createdUserId.
     */
    protected $createdUserId;
    
    /**
     * @ORM\Column(type="integer")
     * @ZK\StandardFields(type="userid", on="update")
     * @var integer $updatedUserId.
     */
    protected $updatedUserId;
    
    /**
     * @ORM\Column(type="datetime")
     * @Gedmo\Timestampable(on="create")
     * @var datetime $createdDate.
     */
    protected $createdDate;
    
    /**
     * @ORM\Column(type="datetime")
     * @Gedmo\Timestampable(on="update")
     * @var datetime $updatedDate.
     */
    protected $updatedDate;
    
    /**
     * Unidirectional - One medium [medium] has many mediaHandlers [media handlers] (INVERSE SIDE).
     *
     * @ORM\ManyToMany(targetEntity="MediaRepository_Entity_MediaHandler")
     * @ORM\JoinTable(name="medrep_mediummediahandlers")
     * @var MediaRepository_Entity_MediaHandler[] $mediaHandlers.
     */
    protected $mediaHandlers = null;
    
    
    /**
     * Constructor.
     * Will not be called by Doctrine and can therefore be used
     * for own implementation purposes. It is also possible to add
     * arbitrary arguments as with every other class method.
     *
     * @param TODO
     */
    public function __construct()
    {
        $this->id = 1;
        $this->owner = UserUtil::getVar('uid');
        $this->_idFields = array('id');
        $this->initValidator();
        $this->_hasUniqueSlug = true;
        $this->mediaHandlers = new ArrayCollection();
        $this->attributes = new Doctrine\Common\Collections\ArrayCollection();
        $this->categories = new Doctrine\Common\Collections\ArrayCollection();
    }
    
    /**
     * Get _object type.
     *
     * @return string
     */
    public function get_objectType()
    {
        return $this->_objectType;
    }
    
    /**
     * Set _object type.
     *
     * @param string $_objectType.
     *
     * @return void
     */
    public function set_objectType($_objectType)
    {
        $this->_objectType = $_objectType;
    }
    
    /**
     * Get _id fields.
     *
     * @return array
     */
    public function get_idFields()
    {
        return $this->_idFields;
    }
    
    /**
     * Set _id fields.
     *
     * @param array $_idFields.
     *
     * @return void
     */
    public function set_idFields(array $_idFields = Array())
    {
        $this->_idFields = $_idFields;
    }
    
    /**
     * Get _validator.
     *
     * @return MediaRepository_Entity_Validator_Medium
     */
    public function get_validator()
    {
        return $this->_validator;
    }
    
    /**
     * Set _validator.
     *
     * @param MediaRepository_Entity_Validator_Medium $_validator.
     *
     * @return void
     */
    public function set_validator(MediaRepository_Entity_Validator_Medium $_validator = null)
    {
        $this->_validator = $_validator;
    }
    
    /**
     * Get _has unique slug.
     *
     * @return boolean
     */
    public function get_hasUniqueSlug()
    {
        return $this->_hasUniqueSlug;
    }
    
    /**
     * Set _has unique slug.
     *
     * @param boolean $_hasUniqueSlug.
     *
     * @return void
     */
    public function set_hasUniqueSlug($_hasUniqueSlug)
    {
        $this->_hasUniqueSlug = $_hasUniqueSlug;
    }
    
    /**
     * Get _actions.
     *
     * @return array
     */
    public function get_actions()
    {
        return $this->_actions;
    }
    
    /**
     * Set _actions.
     *
     * @param array $_actions.
     *
     * @return void
     */
    public function set_actions(array $_actions = Array())
    {
        $this->_actions = $_actions;
    }
    
    
    /**
     * Get id.
     *
     * @return integer
     */
    public function getId()
    {
        return $this->id;
    }
    
    /**
     * Set id.
     *
     * @param integer $id.
     *
     * @return void
     */
    public function setId($id)
    {
        if ($id != $this->id) {
            $this->id = $id;
        }
    }
    
    /**
     * Get owner.
     *
     * @return bigint
     */
    public function getOwner()
    {
        return $this->owner;
    }
    
    /**
     * Set owner.
     *
     * @param bigint $owner.
     *
     * @return void
     */
    public function setOwner($owner)
    {
        if ($owner != $this->owner) {
            $this->owner = $owner;
        }
    }
    
    /**
     * Get title.
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->title;
    }
    
    /**
     * Set title.
     *
     * @param string $title.
     *
     * @return void
     */
    public function setTitle($title)
    {
        if ($title != $this->title) {
            $this->title = $title;
        }
    }
    
    /**
     * Get keywords.
     *
     * @return string
     */
    public function getKeywords()
    {
        return $this->keywords;
    }
    
    /**
     * Set keywords.
     *
     * @param string $keywords.
     *
     * @return void
     */
    public function setKeywords($keywords)
    {
        if ($keywords != $this->keywords) {
            $this->keywords = $keywords;
        }
    }
    
    /**
     * Get description.
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->description;
    }
    
    /**
     * Set description.
     *
     * @param string $description.
     *
     * @return void
     */
    public function setDescription($description)
    {
        if ($description != $this->description) {
            $this->description = $description;
        }
    }
    
    /**
     * Get description2.
     *
     * @return string
     */
    public function getDescription2()
    {
        return $this->description2;
    }
    
    /**
     * Set description2.
     *
     * @param string $description2.
     *
     * @return void
     */
    public function setDescription2($description2)
    {
        if ($description2 != $this->description2) {
            $this->description2 = $description2;
        }
    }
    
    /**
     * Get date taken.
     *
     * @return string
     */
    public function getDateTaken()
    {
        return $this->dateTaken;
    }
    
    /**
     * Set date taken.
     *
     * @param string $dateTaken.
     *
     * @return void
     */
    public function setDateTaken($dateTaken)
    {
        if ($dateTaken != $this->dateTaken) {
            $this->dateTaken = $dateTaken;
        }
    }
    
    /**
     * Get place taken.
     *
     * @return string
     */
    public function getPlaceTaken()
    {
        return $this->placeTaken;
    }
    
    /**
     * Set place taken.
     *
     * @param string $placeTaken.
     *
     * @return void
     */
    public function setPlaceTaken($placeTaken)
    {
        if ($placeTaken != $this->placeTaken) {
            $this->placeTaken = $placeTaken;
        }
    }
    
    /**
     * Get notes.
     *
     * @return string
     */
    public function getNotes()
    {
        return $this->notes;
    }
    
    /**
     * Set notes.
     *
     * @param string $notes.
     *
     * @return void
     */
    public function setNotes($notes)
    {
        if ($notes != $this->notes) {
            $this->notes = $notes;
        }
    }
    
    /**
     * Get license.
     *
     * @return string
     */
    public function getLicense()
    {
        return $this->license;
    }
    
    /**
     * Set license.
     *
     * @param string $license.
     *
     * @return void
     */
    public function setLicense($license)
    {
        if ($license != $this->license) {
            $this->license = $license;
        }
    }
    
    /**
     * Get areamap.
     *
     * @return string
     */
    public function getAreamap()
    {
        return $this->areamap;
    }
    
    /**
     * Set areamap.
     *
     * @param string $areamap.
     *
     * @return void
     */
    public function setAreamap($areamap)
    {
        if ($areamap != $this->areamap) {
            $this->areamap = $areamap;
        }
    }
    
    /**
     * Get show location.
     *
     * @return boolean
     */
    public function getShowLocation()
    {
        return $this->showLocation;
    }
    
    /**
     * Set show location.
     *
     * @param boolean $showLocation.
     *
     * @return void
     */
    public function setShowLocation($showLocation)
    {
        if ($showLocation !== $this->showLocation) {
            $this->showLocation = (bool)$showLocation;
        }
    }
    
    /**
     * Get latitude.
     *
     * @return decimal
     */
    public function getLatitude()
    {
        return $this->latitude;
    }
    
    /**
     * Set latitude.
     *
     * @param decimal $latitude.
     *
     * @return void
     */
    public function setLatitude($latitude)
    {
        if ($latitude != $this->latitude) {
            $this->latitude = $latitude;
        }
    }
    
    /**
     * Get longitude.
     *
     * @return decimal
     */
    public function getLongitude()
    {
        return $this->longitude;
    }
    
    /**
     * Set longitude.
     *
     * @param decimal $longitude.
     *
     * @return void
     */
    public function setLongitude($longitude)
    {
        if ($longitude != $this->longitude) {
            $this->longitude = $longitude;
        }
    }
    
    /**
     * Get zoom factor.
     *
     * @return smallint
     */
    public function getZoomFactor()
    {
        return $this->zoomFactor;
    }
    
    /**
     * Set zoom factor.
     *
     * @param smallint $zoomFactor.
     *
     * @return void
     */
    public function setZoomFactor($zoomFactor)
    {
        if ($zoomFactor != $this->zoomFactor) {
            $this->zoomFactor = $zoomFactor;
        }
    }
    
    /**
     * Get settings.
     *
     * @return array
     */
    public function getSettings()
    {
        return $this->settings;
    }
    
    /**
     * Set settings.
     *
     * @param array $settings.
     *
     * @return void
     */
    public function setSettings($settings)
    {
        if ($settings != $this->settings) {
            $this->settings = $settings;
        }
    }
    
    /**
     * Get dlcount.
     *
     * @return bigint
     */
    public function getDlcount()
    {
        return $this->dlcount;
    }
    
    /**
     * Set dlcount.
     *
     * @param bigint $dlcount.
     *
     * @return void
     */
    public function setDlcount($dlcount)
    {
        if ($dlcount != $this->dlcount) {
            $this->dlcount = $dlcount;
        }
    }
    
    /**
     * Get url.
     *
     * @return string
     */
    public function getUrl()
    {
        return $this->url;
    }
    
    /**
     * Set url.
     *
     * @param string $url.
     *
     * @return void
     */
    public function setUrl($url)
    {
        if ($url != $this->url) {
            $this->url = $url;
        }
    }
    
    /**
     * Get media handler.
     *
     * @return string
     */
    public function getMediaHandler()
    {
        return $this->mediaHandler;
    }
    
    /**
     * Set media handler.
     *
     * @param string $mediaHandler.
     *
     * @return void
     */
    public function setMediaHandler($mediaHandler)
    {
        if ($mediaHandler != $this->mediaHandler) {
            $this->mediaHandler = $mediaHandler;
        }
    }
    
    /**
     * Get free type.
     *
     * @return smallint
     */
    public function getFreeType()
    {
        return $this->freeType;
    }
    
    /**
     * Set free type.
     *
     * @param smallint $freeType.
     *
     * @return void
     */
    public function setFreeType($freeType)
    {
        if ($freeType != $this->freeType) {
            $this->freeType = $freeType;
        }
    }
    
    /**
     * Get additions.
     *
     * @return array
     */
    public function getAdditions()
    {
        return $this->additions;
    }
    
    /**
     * Set additions.
     *
     * @param array $additions.
     *
     * @return void
     */
    public function setAdditions($additions)
    {
        if ($additions != $this->additions) {
            $this->additions = $additions;
        }
    }
    
    /**
     * Get file upload.
     *
     * @return string
     */
    public function getFileUpload()
    {
        return $this->fileUpload;
    }
    
    /**
     * Set file upload.
     *
     * @param string $fileUpload.
     *
     * @return void
     */
    public function setFileUpload($fileUpload)
    {
        if ($fileUpload != $this->fileUpload) {
            $this->fileUpload = $fileUpload;
        }
    }
    
    /**
     * Get file upload full path.
     *
     * @return string
     */
    public function getFileUploadFullPath()
    {
        return $this->fileUploadFullPath;
    }
    
    /**
     * Set file upload full path.
     *
     * @param string $fileUploadFullPath.
     *
     * @return void
     */
    public function setFileUploadFullPath($fileUploadFullPath)
    {
        if ($fileUploadFullPath != $this->fileUploadFullPath) {
            $this->fileUploadFullPath = $fileUploadFullPath;
        }
    }
    
    /**
     * Get file upload full path url.
     *
     * @return string
     */
    public function getFileUploadFullPathUrl()
    {
        return $this->fileUploadFullPathUrl;
    }
    
    /**
     * Set file upload full path url.
     *
     * @param string $fileUploadFullPathUrl.
     *
     * @return void
     */
    public function setFileUploadFullPathUrl($fileUploadFullPathUrl)
    {
        if ($fileUploadFullPathUrl != $this->fileUploadFullPathUrl) {
            $this->fileUploadFullPathUrl = $fileUploadFullPathUrl;
        }
    }
    
    /**
     * Get file upload meta.
     *
     * @return array
     */
    public function getFileUploadMeta()
    {
        return $this->fileUploadMeta;
    }
    
    /**
     * Set file upload meta.
     *
     * @param array $fileUploadMeta.
     *
     * @return void
     */
    public function setFileUploadMeta($fileUploadMeta = Array())
    {
        if ($fileUploadMeta != $this->fileUploadMeta) {
            $this->fileUploadMeta = $fileUploadMeta;
        }
    }
    
    /**
     * Get slug.
     *
     * @return string
     */
    public function getSlug()
    {
        return $this->slug;
    }
    
    
    /**
     * Get metadata.
     *
     * @return MediaRepository_Entity_MediumMetaData
     */
    public function getMetadata()
    {
        return $this->metadata;
    }
    
    /**
     * Set metadata.
     *
     * @param MediaRepository_Entity_MediumMetaData $metadata.
     *
     * @return void
     */
    public function setMetadata(MediaRepository_Entity_MediumMetaData $metadata = null)
    {
        $this->metadata = $metadata;
    }
    
    /**
     * Get attributes.
     *
     * @return array
     */
    public function getAttributes()
    {
        return $this->attributes;
    }
    
        /**
         * Set attribute.
         *
         * @param string $name.
         * @param string $value.
         *
         * @return void
         */
        public function setAttribute($name, $value)
        {
            if(isset($this->attributes[$name])) {
                if($value == null) {
                    $this->attributes->remove($name);
                } else {
                    $this->attributes[$name]->setValue($value);
                }
            } else {
                $this->attributes[$name] = new MediaRepository_Entity_MediumAttribute($name, $value, $this);
            }
        }
    /**
     * Get categories.
     *
     * @return array
     */
    public function getCategories()
    {
        return $this->categories;
    }
    
    /**
     * Set categories.
     *
     * @param array $categories.
     *
     * @return void
     */
    public function setCategories($categories)
    {
        $this->categories = $categories;
    }
    
    /**
     * Get created user id.
     *
     * @return integer[]
     */
    public function getCreatedUserId()
    {
        return $this->createdUserId;
    }
    
    /**
     * Set created user id.
     *
     * @param integer[] $createdUserId.
     *
     * @return void
     */
    public function setCreatedUserId($createdUserId)
    {
        $this->createdUserId = $createdUserId;
    }
    
    /**
     * Get updated user id.
     *
     * @return integer[]
     */
    public function getUpdatedUserId()
    {
        return $this->updatedUserId;
    }
    
    /**
     * Set updated user id.
     *
     * @param integer[] $updatedUserId.
     *
     * @return void
     */
    public function setUpdatedUserId($updatedUserId)
    {
        $this->updatedUserId = $updatedUserId;
    }
    
    /**
     * Get created date.
     *
     * @return datetime[]
     */
    public function getCreatedDate()
    {
        return $this->createdDate;
    }
    
    /**
     * Set created date.
     *
     * @param datetime[] $createdDate.
     *
     * @return void
     */
    public function setCreatedDate($createdDate)
    {
        $this->createdDate = $createdDate;
    }
    
    /**
     * Get updated date.
     *
     * @return datetime[]
     */
    public function getUpdatedDate()
    {
        return $this->updatedDate;
    }
    
    /**
     * Set updated date.
     *
     * @param datetime[] $updatedDate.
     *
     * @return void
     */
    public function setUpdatedDate($updatedDate)
    {
        $this->updatedDate = $updatedDate;
    }
    
    
    /**
     * Get media handlers.
     *
     * @return MediaRepository_Entity_MediaHandler[]
     */
    public function getMediaHandlers()
    {
        return $this->mediaHandlers;
    }
    
    /**
     * Set media handlers.
     *
     * @param MediaRepository_Entity_MediaHandler[] $mediaHandlers.
     *
     * @return void
     */
    public function setMediaHandlers($mediaHandlers)
    {
        $this->mediaHandlers = $mediaHandlers;
    }
    
    /**
     * Adds an instance of MediaRepository_Entity_MediaHandler to the list of media handlers.
     *
     * @param MediaRepository_Entity_MediaHandler $mediaHandler
     .
     *
     * @return void
     */
    public function addMediaHandlers(MediaRepository_Entity_MediaHandler $mediaHandler
    )
    {
        $this->mediaHandlers[] = $mediaHandler;
    }
    
    /**
     * Removes an instance of MediaRepository_Entity_MediaHandler from the list of media handlers.
     *
     * @param MediaRepository_Entity_MediaHandler $mediaHandler.
     *
     * @return void
     */
    public function removeMediaHandlers(MediaRepository_Entity_MediaHandler $mediaHandler)
    {
        $this->mediaHandlers->removeElement($mediaHandler);
    }
    
    
    /**
     * Initialise validator and return it's instance.
     *
     * @return MediaRepository_Entity_Validator_Medium The validator for this entity.
     */
    public function initValidator()
    {
        if (!is_null($this->_validator)) {
            return $this->_validator;
        }
        $this->_validator = new MediaRepository_Entity_Validator_Medium($this);
        return $this->_validator;
    }
    
    /**
     * Start validation and raise exception if invalid data is found.
     *
     * @return void.
     * @throws Zikula_Exception
     */
    public function validate()
    {
        $result = $this->initValidator()->validateAll();
        if (is_array($result)) {
            throw new Zikula_Exception($result['message'], $result['code'], $result['debugArray']);
        }
    }
    
    /**
     * Return entity data in JSON format.
     *
     * @return string JSON-encoded data.
     */
    public function toJson()
    {
        return json_encode($this->toArray());
    }
    
    /**
     * Collect available actions for this entity.
     */
    protected function prepareItemActions()
    {
        if (!empty($this->_actions)) {
            return;
        }
    
        $currentType = FormUtil::getPassedValue('type', 'user', 'GETPOST', FILTER_SANITIZE_STRING);
        $currentFunc = FormUtil::getPassedValue('func', 'main', 'GETPOST', FILTER_SANITIZE_STRING);
        $dom = ZLanguage::getModuleDomain('MediaRepository');
        if ($currentType == 'admin') {
            if (in_array($currentFunc, array('main', 'view'))) {
                $this->_actions[] = array(
                    'url' => array('type' => 'user', 'func' => 'display', 'arguments' => array('ot' => 'medium', 'id' => $this['id'], 'slug' => $this->slug)),
                    'icon' => 'preview',
                    'linkTitle' => __('Open preview page', $dom),
                    'linkText' => __('Preview', $dom)
                );
                $this->_actions[] = array(
                    'url' => array('type' => 'admin', 'func' => 'display', 'arguments' => array('ot' => 'medium', 'id' => $this['id'], 'slug' => $this->slug)),
                    'icon' => 'display',
                    'linkTitle' => str_replace('"', '', $this['title']),
                    'linkText' => __('Details', $dom)
                );
            }
            if (in_array($currentFunc, array('main', 'view', 'display'))) {
                    if (SecurityUtil::checkPermission('MediaRepository:Medium:', $this->id . '::', ACCESS_EDIT)) {
                $this->_actions[] = array(
                    'url' => array('type' => 'admin', 'func' => 'edit', 'arguments' => array('ot' => 'medium', 'id' => $this['id'])),
                    'icon' => 'edit',
                    'linkTitle' => __('Edit', $dom),
                    'linkText' => __('Edit', $dom)
                );
                        $this->_actions[] = array(
                            'url' => array('type' => 'admin', 'func' => 'edit', 'arguments' => array('ot' => 'medium', 'astemplate' => $this['id'])),
                            'icon' => 'saveas',
                            'linkTitle' => __('Reuse for new item', $dom),
                            'linkText' => __('Reuse', $dom)
                        );
                    }
            }
            if ($currentFunc == 'display') {
                $this->_actions[] = array(
                    'url' => array('type' => 'admin', 'func' => 'view', 'arguments' => array('ot' => 'medium')),
                    'icon' => 'back',
                    'linkTitle' => __('Back to overview', $dom),
                    'linkText' => __('Back to overview', $dom)
                );
            }
        }
        if ($currentType == 'user') {
            if (in_array($currentFunc, array('main', 'view'))) {
                $this->_actions[] = array(
                    'url' => array('type' => 'user', 'func' => 'display', 'arguments' => array('ot' => 'medium', 'id' => $this['id'], 'slug' => $this->slug)),
                    'icon' => 'display',
                    'linkTitle' => str_replace('"', '', $this['title']),
                    'linkText' => __('Details', $dom)
                );
            }
            if (in_array($currentFunc, array('main', 'view', 'display'))) {
                    if (SecurityUtil::checkPermission('MediaRepository:Medium:', $this->id . '::', ACCESS_EDIT)) {
                $this->_actions[] = array(
                    'url' => array('type' => 'user', 'func' => 'edit', 'arguments' => array('ot' => 'medium', 'id' => $this['id'])),
                    'icon' => 'edit',
                    'linkTitle' => __('Edit', $dom),
                    'linkText' => __('Edit', $dom)
                );
                        $this->_actions[] = array(
                            'url' => array('type' => 'user', 'func' => 'edit', 'arguments' => array('ot' => 'medium', 'astemplate' => $this['id'])),
                            'icon' => 'saveas',
                            'linkTitle' => __('Reuse for new item', $dom),
                            'linkText' => __('Reuse', $dom)
                        );
                    }
            }
            if ($currentFunc == 'display') {
                $this->_actions[] = array(
                    'url' => array('type' => 'user', 'func' => 'view', 'arguments' => array('ot' => 'medium')),
                    'icon' => 'back',
                    'linkTitle' => __('Back to overview', $dom),
                    'linkText' => __('Back to overview', $dom)
                );
            }
        }
    }

    
    /**
     * Post-Process the data after the entity has been constructed by the entity manager.
     * The event happens after the entity has been loaded from database or after a refresh call.
     *
     * Restrictions:
     *     - no access to entity manager or unit of work apis
     *     - no access to associations (not initialised yet)
     *
     * @see MediaRepository_Entity_Medium::postLoadCallback()
     * @return boolean true if completed successfully else false.
     */
    protected function performPostLoadCallback()
    {
        // echo 'loaded a record ...';
        $currentFunc = FormUtil::getPassedValue('func', 'main', 'GETPOST', FILTER_SANITIZE_STRING);
        // initialise the upload handler
        $uploadManager = new MediaRepository_UploadHandler();
        
        $this['id'] = (int) ((isset($this['id']) && !empty($this['id'])) ? DataUtil::formatForDisplay($this['id']) : 0);
        $this['owner'] = (int) ((isset($this['owner']) && !empty($this['owner'])) ? DataUtil::formatForDisplay($this['owner']) : 0);
        if ($currentFunc != 'edit') {
            $this['title'] = ((isset($this['title']) && !empty($this['title'])) ? DataUtil::formatForDisplayHTML($this['title']) : '');
        }
        if ($currentFunc != 'edit') {
            $this['keywords'] = ((isset($this['keywords']) && !empty($this['keywords'])) ? DataUtil::formatForDisplayHTML($this['keywords']) : '');
        }
        if ($currentFunc != 'edit') {
            $this['description'] = ((isset($this['description']) && !empty($this['description'])) ? DataUtil::formatForDisplayHTML($this['description']) : '');
        }
        if ($currentFunc != 'edit') {
            $this['description2'] = ((isset($this['description2']) && !empty($this['description2'])) ? DataUtil::formatForDisplayHTML($this['description2']) : '');
        }
        if ($currentFunc != 'edit') {
            $this['dateTaken'] = ((isset($this['dateTaken']) && !empty($this['dateTaken'])) ? DataUtil::formatForDisplayHTML($this['dateTaken']) : '');
        }
        if ($currentFunc != 'edit') {
            $this['placeTaken'] = ((isset($this['placeTaken']) && !empty($this['placeTaken'])) ? DataUtil::formatForDisplayHTML($this['placeTaken']) : '');
        }
        if ($currentFunc != 'edit') {
            $this['notes'] = ((isset($this['notes']) && !empty($this['notes'])) ? DataUtil::formatForDisplayHTML($this['notes']) : '');
        }
        if ($currentFunc != 'edit') {
            $this['license'] = ((isset($this['license']) && !empty($this['license'])) ? DataUtil::formatForDisplayHTML($this['license']) : '');
        }
        if ($currentFunc != 'edit') {
            $this['areamap'] = ((isset($this['areamap']) && !empty($this['areamap'])) ? DataUtil::formatForDisplayHTML($this['areamap']) : '');
        }
        $this['showLocation'] = (bool) $this['showLocation'];
        $this['latitude'] = (float) ((isset($this['latitude']) && !empty($this['latitude'])) ? DataUtil::formatForDisplay($this['latitude']) : 0.00);
        $this['longitude'] = (float) ((isset($this['longitude']) && !empty($this['longitude'])) ? DataUtil::formatForDisplay($this['longitude']) : 0.00);
        $this['zoomFactor'] = (int) ((isset($this['zoomFactor']) && !empty($this['zoomFactor'])) ? DataUtil::formatForDisplay($this['zoomFactor']) : 0);
        $this['settings'] = ((isset($this['settings']) && is_array($this['settings'])) ? DataUtil::formatForDisplay($this['settings']) : array());
        $this['dlcount'] = (int) ((isset($this['dlcount']) && !empty($this['dlcount'])) ? DataUtil::formatForDisplay($this['dlcount']) : 0);
        $this['url'] = ((isset($this['url']) && !empty($this['url'])) ? DataUtil::formatForDisplay($this['url']) : '');
        if ($currentFunc != 'edit') {
            $this['mediaHandler'] = ((isset($this['mediaHandler']) && !empty($this['mediaHandler'])) ? DataUtil::formatForDisplayHTML($this['mediaHandler']) : '');
        }
        $this['freeType'] = (int) ((isset($this['freeType']) && !empty($this['freeType'])) ? DataUtil::formatForDisplay($this['freeType']) : 0);
        $this['additions'] = ((isset($this['additions']) && is_array($this['additions'])) ? DataUtil::formatForDisplay($this['additions']) : array());
        if (!empty($this['fileUpload'])) {
            $basePath = MediaRepository_Util_Controller::getFileBaseFolder('medium', 'fileUpload');
            $fullPath = $basePath .  $this['fileUpload'];
            $this['fileUploadFullPath'] = $fullPath;
            $this['fileUploadFullPathURL'] = System::getBaseUrl() . $fullPath;
        
            // just some backwards compatibility stuff
            if (!isset($this['fileUploadMeta']) || !is_array($this['fileUploadMeta']) || !count($this['fileUploadMeta'])) {
                // assign new meta data
                $this['fileUploadMeta'] = $uploadManager->readMetaDataForFile($this['fileUpload'], $fullPath);
            }
        }
        $this->prepareItemActions();
        return true;
    }
    
    /**
     * Pre-Process the data prior to an insert operation.
     * The event happens before the entity managers persist operation is executed for this entity.
     *
     * Restrictions:
     *     - no access to entity manager or unit of work apis
     *     - no identifiers available if using an identity generator like sequences
     *     - Doctrine won't recognize changes on relations which are done here
     *       if this method is called by cascade persist
     *     - no creation of other entities allowed
     *
     * @see MediaRepository_Entity_Medium::prePersistCallback()
     * @return boolean true if completed successfully else false.
     */
    protected function performPrePersistCallback()
    {
        // echo 'inserting a record ...';
        $this->validate();
        return true;
    }
    
    /**
     * Post-Process the data after an insert operation.
     * The event happens after the entity has been made persistant.
     * Will be called after the database insert operations.
     * The generated primary key values are available.
     *
     * Restrictions:
     *     - no access to entity manager or unit of work apis
     *
     * @see MediaRepository_Entity_Medium::postPersistCallback()
     * @return boolean true if completed successfully else false.
     */
    protected function performPostPersistCallback()
    {
        // echo 'inserted a record ...';
        return true;
    }
    
    /**
     * Pre-Process the data prior a delete operation.
     * The event happens before the entity managers remove operation is executed for this entity.
     *
     * Restrictions:
     *     - no access to entity manager or unit of work apis
     *     - will not be called for a DQL DELETE statement
     *
     * @see MediaRepository_Entity_Medium::preRemoveCallback()
     * @return boolean true if completed successfully else false.
     */
    protected function performPreRemoveCallback()
    {
        // delete workflow for this entity
        /*$result = Zikula_Workflow_Util::deleteWorkflow($this);
        if ($result === false) {
            $dom = ZLanguage::getModuleDomain('MediaRepository');
            return LogUtil::registerError(__('Error! Could not remove stored workflow.', $dom));
        }*/
        return true;
    }
    
    /**
     * Post-Process the data after a delete.
     * The event happens after the entity has been deleted.
     * Will be called after the database delete operations.
     *
     * Restrictions:
     *     - no access to entity manager or unit of work apis
     *     - will not be called for a DQL DELETE statement
     *
     * @see MediaRepository_Entity_Medium::postRemoveCallback()
     * @return boolean true if completed successfully else false.
     */
    protected function performPostRemoveCallback()
    {
        // echo 'deleted a record ...';
        // initialise the upload handler
        $uploadManager = new MediaRepository_UploadHandler();
    
        $uploadFields = array('fileUpload');
        foreach ($uploadFields as $uploadField) {
            if (empty($this->$uploadField)) {
                continue;
            }
    
            // remove upload file (and image thumbnails)
            $uploadManager->deleteUploadFile('medium', $this, $uploadField);
        }
        return true;
    }
    
    /**
     * Pre-Process the data prior to an update operation.
     * The event happens before the database update operations for the entity data.
     *
     * Restrictions:
     *     - no access to entity manager or unit of work apis
     *     - will not be called for a DQL UPDATE statement
     *     - changes on associations are not allowed and won't be recognized by flush
     *     - changes on properties won't be recognized by flush as well
     *     - no creation of other entities allowed
     *
     * @see MediaRepository_Entity_Medium::preUpdateCallback()
     * @return boolean true if completed successfully else false.
     */
    protected function performPreUpdateCallback()
    {
        // echo 'updating a record ...';
        $this->validate();
        return true;
    }
    
    /**
     * Post-Process the data after an update operation.
     * The event happens after the database update operations for the entity data.
     *
     * Restrictions:
     *     - no access to entity manager or unit of work apis
     *     - will not be called for a DQL UPDATE statement
     *
     * @see MediaRepository_Entity_Medium::postUpdateCallback()
     * @return boolean true if completed successfully else false.
     */
    protected function performPostUpdateCallback()
    {
        // echo 'updated a record ...';
        return true;
    }
    
    /**
     * Pre-Process the data prior to a save operation.
     * This combines the PrePersist and PreUpdate events.
     * For more information see corresponding callback handlers.
     *
     * @see MediaRepository_Entity_Medium::preSaveCallback()
     * @return boolean true if completed successfully else false.
     */
    protected function performPreSaveCallback()
    {
        // echo 'saving a record ...';
        $this->validate();
        return true;
    }
    
    /**
     * Post-Process the data after a save operation.
     * This combines the PostPersist and PostUpdate events.
     * For more information see corresponding callback handlers.
     *
     * @see MediaRepository_Entity_Medium::postSaveCallback()
     * @return boolean true if completed successfully else false.
     */
    protected function performPostSaveCallback()
    {
        // echo 'saved a record ...';
        return true;
    }
    
}
