<?php
/**
 * MediaRepository.
 *
 * @copyright Axel Guckelsberger
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @package MediaRepository
 * @author Axel Guckelsberger <info@guite.de>.
 * @link http://zikula.de
 * @link http://zikula.org
 * @version Generated by ModuleStudio 0.5.5 (http://modulestudio.de) at Wed May 30 16:44:53 CEST 2012.
 */

use Doctrine\ORM\Mapping as ORM;
use Doctrine\Common\Collections\ArrayCollection;
use Gedmo\Mapping\Annotation as Gedmo;
use DoctrineExtensions\StandardFields\Mapping\Annotation as ZK;

/**
 * Entity class that defines the entity structure and behaviours.
 *
 * This is the base entity class for repository entities.
 *
 * @abstract
 */
abstract class MediaRepository_Entity_Base_Repository extends Zikula_EntityAccess
{
    /**
     * @var string The tablename this object maps to
     */
    protected $_objectType = 'repository';
    
    /**
     * @var array List of primary key field names
     */
    protected $_idFields = array();
    
    /**
     * @var MediaRepository_Entity_Validator_Repository The validator for this entity
     */
    protected $_validator = null;
    
    /**
     * @var boolean Whether this entity supports unique slugs
     */
    protected $_hasUniqueSlug = false;
    
    /**
     * @var array List of available item actions
     */
    protected $_actions = array();
    
    /**
     * @ORM\Id
     * @ORM\GeneratedValue
     * @ORM\Column(type="integer", unique=true)
     * @var integer $id.
     */
    protected $id = 0;
    
    /**
     * @ORM\Column(length=255)
     * @var string $name.
     */
    protected $name = '';
    
    /**
     * @ORM\Column(length=255)
     * @var string $workDirectory.
     */
    protected $workDirectory = '/absolute/path/to/upload/dir';
    
    /**
     * @ORM\Column(length=255)
     * @var string $storageDirectory.
     */
    protected $storageDirectory = '/absolute/path/to/storage/dir';
    
    /**
     * @ORM\Column(length=255)
     * @var string $cacheDirectory.
     */
    protected $cacheDirectory = 'imgcache/';
    
    /**
     * @ORM\Column(type="smallint")
     * @var smallint $storageMode.
     */
    protected $storageMode = 1;
    
    /**
     * @ORM\Column(type="smallint")
     * @var smallint $permissionScope.
     */
    protected $permissionScope = 1;
    
    /**
     * @ORM\Column(type="boolean")
     * @var boolean $useQuota.
     */
    protected $useQuota = false;
    
    /**
     * @ORM\Column(type="boolean")
     * @var boolean $allowManagementOfOwnFiles.
     */
    protected $allowManagementOfOwnFiles = false;
    
    /**
     * @ORM\Column(type="boolean")
     * @var boolean $allowFileMailing.
     */
    protected $allowFileMailing = false;
    
    /**
     * @ORM\Column(type="bigint")
     * @var bigint $maxSizeForMail.
     */
    protected $maxSizeForMail = 0;
    
    /**
     * @ORM\Column(type="smallint")
     * @var smallint $maxFilesPerUpload.
     */
    protected $maxFilesPerUpload = 5;
    
    /**
     * @ORM\Column(type="bigint")
     * @var bigint $maxUploadFileSize.
     */
    protected $maxUploadFileSize = 0;
    
    /**
     * @ORM\Column(type="smallint")
     * @var smallint $uploadNamingConvention.
     */
    protected $uploadNamingConvention = 1;
    
    /**
     * @ORM\Column(length=50)
     * @var string $uploadNamingPrefix.
     */
    protected $uploadNamingPrefix = '';
    
    /**
     * @ORM\Column(type="boolean")
     * @var boolean $enableSharpen.
     */
    protected $enableSharpen = false;
    
    /**
     * @ORM\Column(type="boolean")
     * @var boolean $enableShrinking.
     */
    protected $enableShrinking = false;
    
    /**
     * @ORM\Column(type="array")
     * @var array $shrinkDimensions.
     */
    protected $shrinkDimensions = array();
    
    /**
     * @ORM\Column(type="boolean")
     * @var boolean $useThumbCropper.
     */
    protected $useThumbCropper = false;
    
    /**
     * @ORM\Column(type="smallint")
     * @var smallint $cropSizeMode.
     */
    protected $cropSizeMode = 0;
    
    /**
     * @ORM\Column(length=255)
     * @var string $defaultTemplateCollection.
     */
    protected $defaultTemplateCollection = 'standard';
    
    /**
     * @ORM\Column(type="boolean")
     * @var boolean $allowTemplateOverrideCollection.
     */
    protected $allowTemplateOverrideCollection = false;
    
    /**
     * @ORM\Column(length=255)
     * @var string $defaultTemplateDetail.
     */
    protected $defaultTemplateDetail = 'standard';
    
    /**
     * @ORM\Column(type="boolean")
     * @var boolean $allowTemplateOverrideDetail.
     */
    protected $allowTemplateOverrideDetail = false;
    
    /**
     * @ORM\Column(type="smallint")
     * @var smallint $startPageViewMode.
     */
    protected $startPageViewMode = 1;
    
    /**
     * @ORM\Column(type="smallint")
     * @var smallint $downloadMode.
     */
    protected $downloadMode = 1;
    
    /**
     * @ORM\Column(type="boolean")
     * @var boolean $sendMailAfterUpload.
     */
    protected $sendMailAfterUpload = false;
    
    /**
     * @ORM\Column(length=255)
     * @var string $mailRecipient.
     */
    protected $mailRecipient = '';
    
    
    /**
     * @ORM\OneToMany(targetEntity="MediaRepository_Entity_RepositoryCategory", 
     *                mappedBy="entity", cascade={"all"}, 
     *                orphanRemoval=true, indexBy="categoryRegistryId")
     * @var MediaRepository_Entity_RepositoryCategory
     */
    protected $categories;
    
    /**
     * @ORM\Column(type="integer")
     * @ZK\StandardFields(type="userid", on="create")
     * @var integer $createdUserId.
     */
    protected $createdUserId;
    
    /**
     * @ORM\Column(type="integer")
     * @ZK\StandardFields(type="userid", on="update")
     * @var integer $updatedUserId.
     */
    protected $updatedUserId;
    
    /**
     * @ORM\Column(type="datetime")
     * @Gedmo\Timestampable(on="create")
     * @var datetime $createdDate.
     */
    protected $createdDate;
    
    /**
     * @ORM\Column(type="datetime")
     * @Gedmo\Timestampable(on="update")
     * @var datetime $updatedDate.
     */
    protected $updatedDate;
    
    /**
     * Unidirectional - One repository [repository] has many files [media] (INVERSE SIDE).
     *
     * @ORM\ManyToMany(targetEntity="MediaRepository_Entity_Medium")
     * @ORM\JoinTable(name="medrep_repositoryfiles")
     * @var MediaRepository_Entity_Medium[] $files.
     */
    protected $files = null;
    
    /**
     * Unidirectional - Many repositories [repositories] have many thumbSizes [thumb sizes] (OWNING SIDE).
     *
     * @ORM\ManyToMany(targetEntity="MediaRepository_Entity_ThumbSize")
     * @ORM\JoinTable(name="medrep_repository_thumbsize")
     * @var MediaRepository_Entity_ThumbSize[] $thumbSizes.
     */
    protected $thumbSizes = null;
    
    /**
     * Constructor.
     * Will not be called by Doctrine and can therefore be used
     * for own implementation purposes. It is also possible to add
     * arbitrary arguments as with every other class method.
     *
     * @param TODO
     */
    public function __construct()
    {
        $this->id = 1;
        $this->_idFields = array('id');
        $this->initValidator();
        $this->_hasUniqueSlug = false;
        $this->files = new ArrayCollection();
        $this->thumbSizes = new ArrayCollection();
        $this->categories = new Doctrine\Common\Collections\ArrayCollection();
    }
    
    /**
     * Get _object type.
     *
     * @return string
     */
    public function get_objectType()
    {
        return $this->_objectType;
    }
    
    /**
     * Set _object type.
     *
     * @param string $_objectType.
     *
     * @return void
     */
    public function set_objectType($_objectType)
    {
        $this->_objectType = $_objectType;
    }
    
    /**
     * Get _id fields.
     *
     * @return array
     */
    public function get_idFields()
    {
        return $this->_idFields;
    }
    
    /**
     * Set _id fields.
     *
     * @param array $_idFields.
     *
     * @return void
     */
    public function set_idFields(array $_idFields = Array())
    {
        $this->_idFields = $_idFields;
    }
    
    /**
     * Get _validator.
     *
     * @return MediaRepository_Entity_Validator_Repository
     */
    public function get_validator()
    {
        return $this->_validator;
    }
    
    /**
     * Set _validator.
     *
     * @param MediaRepository_Entity_Validator_Repository $_validator.
     *
     * @return void
     */
    public function set_validator(MediaRepository_Entity_Validator_Repository $_validator = null)
    {
        $this->_validator = $_validator;
    }
    
    /**
     * Get _has unique slug.
     *
     * @return boolean
     */
    public function get_hasUniqueSlug()
    {
        return $this->_hasUniqueSlug;
    }
    
    /**
     * Set _has unique slug.
     *
     * @param boolean $_hasUniqueSlug.
     *
     * @return void
     */
    public function set_hasUniqueSlug($_hasUniqueSlug)
    {
        $this->_hasUniqueSlug = $_hasUniqueSlug;
    }
    
    /**
     * Get _actions.
     *
     * @return array
     */
    public function get_actions()
    {
        return $this->_actions;
    }
    
    /**
     * Set _actions.
     *
     * @param array $_actions.
     *
     * @return void
     */
    public function set_actions(array $_actions = Array())
    {
        $this->_actions = $_actions;
    }
    
    
    /**
     * Get id.
     *
     * @return integer
     */
    public function getId()
    {
        return $this->id;
    }
    
    /**
     * Set id.
     *
     * @param integer $id.
     *
     * @return void
     */
    public function setId($id)
    {
        if ($id != $this->id) {
            $this->id = $id;
        }
    }
    
    /**
     * Get name.
     *
     * @return string
     */
    public function getName()
    {
        return $this->name;
    }
    
    /**
     * Set name.
     *
     * @param string $name.
     *
     * @return void
     */
    public function setName($name)
    {
        if ($name != $this->name) {
            $this->name = $name;
        }
    }
    
    /**
     * Get work directory.
     *
     * @return string
     */
    public function getWorkDirectory()
    {
        return $this->workDirectory;
    }
    
    /**
     * Set work directory.
     *
     * @param string $workDirectory.
     *
     * @return void
     */
    public function setWorkDirectory($workDirectory)
    {
        if ($workDirectory != $this->workDirectory) {
            $this->workDirectory = $workDirectory;
        }
    }
    
    /**
     * Get storage directory.
     *
     * @return string
     */
    public function getStorageDirectory()
    {
        return $this->storageDirectory;
    }
    
    /**
     * Set storage directory.
     *
     * @param string $storageDirectory.
     *
     * @return void
     */
    public function setStorageDirectory($storageDirectory)
    {
        if ($storageDirectory != $this->storageDirectory) {
            $this->storageDirectory = $storageDirectory;
        }
    }
    
    /**
     * Get cache directory.
     *
     * @return string
     */
    public function getCacheDirectory()
    {
        return $this->cacheDirectory;
    }
    
    /**
     * Set cache directory.
     *
     * @param string $cacheDirectory.
     *
     * @return void
     */
    public function setCacheDirectory($cacheDirectory)
    {
        if ($cacheDirectory != $this->cacheDirectory) {
            $this->cacheDirectory = $cacheDirectory;
        }
    }
    
    /**
     * Get storage mode.
     *
     * @return smallint
     */
    public function getStorageMode()
    {
        return $this->storageMode;
    }
    
    /**
     * Set storage mode.
     *
     * @param smallint $storageMode.
     *
     * @return void
     */
    public function setStorageMode($storageMode)
    {
        if ($storageMode != $this->storageMode) {
            $this->storageMode = $storageMode;
        }
    }
    
    /**
     * Get permission scope.
     *
     * @return smallint
     */
    public function getPermissionScope()
    {
        return $this->permissionScope;
    }
    
    /**
     * Set permission scope.
     *
     * @param smallint $permissionScope.
     *
     * @return void
     */
    public function setPermissionScope($permissionScope)
    {
        if ($permissionScope != $this->permissionScope) {
            $this->permissionScope = $permissionScope;
        }
    }
    
    /**
     * Get use quota.
     *
     * @return boolean
     */
    public function getUseQuota()
    {
        return $this->useQuota;
    }
    
    /**
     * Set use quota.
     *
     * @param boolean $useQuota.
     *
     * @return void
     */
    public function setUseQuota($useQuota)
    {
        if ($useQuota !== $this->useQuota) {
            $this->useQuota = (bool)$useQuota;
        }
    }
    
    /**
     * Get allow management of own files.
     *
     * @return boolean
     */
    public function getAllowManagementOfOwnFiles()
    {
        return $this->allowManagementOfOwnFiles;
    }
    
    /**
     * Set allow management of own files.
     *
     * @param boolean $allowManagementOfOwnFiles.
     *
     * @return void
     */
    public function setAllowManagementOfOwnFiles($allowManagementOfOwnFiles)
    {
        if ($allowManagementOfOwnFiles !== $this->allowManagementOfOwnFiles) {
            $this->allowManagementOfOwnFiles = (bool)$allowManagementOfOwnFiles;
        }
    }
    
    /**
     * Get allow file mailing.
     *
     * @return boolean
     */
    public function getAllowFileMailing()
    {
        return $this->allowFileMailing;
    }
    
    /**
     * Set allow file mailing.
     *
     * @param boolean $allowFileMailing.
     *
     * @return void
     */
    public function setAllowFileMailing($allowFileMailing)
    {
        if ($allowFileMailing !== $this->allowFileMailing) {
            $this->allowFileMailing = (bool)$allowFileMailing;
        }
    }
    
    /**
     * Get max size for mail.
     *
     * @return bigint
     */
    public function getMaxSizeForMail()
    {
        return $this->maxSizeForMail;
    }
    
    /**
     * Set max size for mail.
     *
     * @param bigint $maxSizeForMail.
     *
     * @return void
     */
    public function setMaxSizeForMail($maxSizeForMail)
    {
        if ($maxSizeForMail != $this->maxSizeForMail) {
            $this->maxSizeForMail = $maxSizeForMail;
        }
    }
    
    /**
     * Get max files per upload.
     *
     * @return smallint
     */
    public function getMaxFilesPerUpload()
    {
        return $this->maxFilesPerUpload;
    }
    
    /**
     * Set max files per upload.
     *
     * @param smallint $maxFilesPerUpload.
     *
     * @return void
     */
    public function setMaxFilesPerUpload($maxFilesPerUpload)
    {
        if ($maxFilesPerUpload != $this->maxFilesPerUpload) {
            $this->maxFilesPerUpload = $maxFilesPerUpload;
        }
    }
    
    /**
     * Get max upload file size.
     *
     * @return bigint
     */
    public function getMaxUploadFileSize()
    {
        return $this->maxUploadFileSize;
    }
    
    /**
     * Set max upload file size.
     *
     * @param bigint $maxUploadFileSize.
     *
     * @return void
     */
    public function setMaxUploadFileSize($maxUploadFileSize)
    {
        if ($maxUploadFileSize != $this->maxUploadFileSize) {
            $this->maxUploadFileSize = $maxUploadFileSize;
        }
    }
    
    /**
     * Get upload naming convention.
     *
     * @return smallint
     */
    public function getUploadNamingConvention()
    {
        return $this->uploadNamingConvention;
    }
    
    /**
     * Set upload naming convention.
     *
     * @param smallint $uploadNamingConvention.
     *
     * @return void
     */
    public function setUploadNamingConvention($uploadNamingConvention)
    {
        if ($uploadNamingConvention != $this->uploadNamingConvention) {
            $this->uploadNamingConvention = $uploadNamingConvention;
        }
    }
    
    /**
     * Get upload naming prefix.
     *
     * @return string
     */
    public function getUploadNamingPrefix()
    {
        return $this->uploadNamingPrefix;
    }
    
    /**
     * Set upload naming prefix.
     *
     * @param string $uploadNamingPrefix.
     *
     * @return void
     */
    public function setUploadNamingPrefix($uploadNamingPrefix)
    {
        if ($uploadNamingPrefix != $this->uploadNamingPrefix) {
            $this->uploadNamingPrefix = $uploadNamingPrefix;
        }
    }
    
    /**
     * Get enable sharpen.
     *
     * @return boolean
     */
    public function getEnableSharpen()
    {
        return $this->enableSharpen;
    }
    
    /**
     * Set enable sharpen.
     *
     * @param boolean $enableSharpen.
     *
     * @return void
     */
    public function setEnableSharpen($enableSharpen)
    {
        if ($enableSharpen !== $this->enableSharpen) {
            $this->enableSharpen = (bool)$enableSharpen;
        }
    }
    
    /**
     * Get enable shrinking.
     *
     * @return boolean
     */
    public function getEnableShrinking()
    {
        return $this->enableShrinking;
    }
    
    /**
     * Set enable shrinking.
     *
     * @param boolean $enableShrinking.
     *
     * @return void
     */
    public function setEnableShrinking($enableShrinking)
    {
        if ($enableShrinking !== $this->enableShrinking) {
            $this->enableShrinking = (bool)$enableShrinking;
        }
    }
    
    /**
     * Get shrink dimensions.
     *
     * @return array
     */
    public function getShrinkDimensions()
    {
        return $this->shrinkDimensions;
    }
    
    /**
     * Set shrink dimensions.
     *
     * @param array $shrinkDimensions.
     *
     * @return void
     */
    public function setShrinkDimensions($shrinkDimensions)
    {
        if ($shrinkDimensions != $this->shrinkDimensions) {
            $this->shrinkDimensions = $shrinkDimensions;
        }
    }
    
    /**
     * Get use thumb cropper.
     *
     * @return boolean
     */
    public function getUseThumbCropper()
    {
        return $this->useThumbCropper;
    }
    
    /**
     * Set use thumb cropper.
     *
     * @param boolean $useThumbCropper.
     *
     * @return void
     */
    public function setUseThumbCropper($useThumbCropper)
    {
        if ($useThumbCropper !== $this->useThumbCropper) {
            $this->useThumbCropper = (bool)$useThumbCropper;
        }
    }
    
    /**
     * Get crop size mode.
     *
     * @return smallint
     */
    public function getCropSizeMode()
    {
        return $this->cropSizeMode;
    }
    
    /**
     * Set crop size mode.
     *
     * @param smallint $cropSizeMode.
     *
     * @return void
     */
    public function setCropSizeMode($cropSizeMode)
    {
        if ($cropSizeMode != $this->cropSizeMode) {
            $this->cropSizeMode = $cropSizeMode;
        }
    }
    
    /**
     * Get default template collection.
     *
     * @return string
     */
    public function getDefaultTemplateCollection()
    {
        return $this->defaultTemplateCollection;
    }
    
    /**
     * Set default template collection.
     *
     * @param string $defaultTemplateCollection.
     *
     * @return void
     */
    public function setDefaultTemplateCollection($defaultTemplateCollection)
    {
        if ($defaultTemplateCollection != $this->defaultTemplateCollection) {
            $this->defaultTemplateCollection = $defaultTemplateCollection;
        }
    }
    
    /**
     * Get allow template override collection.
     *
     * @return boolean
     */
    public function getAllowTemplateOverrideCollection()
    {
        return $this->allowTemplateOverrideCollection;
    }
    
    /**
     * Set allow template override collection.
     *
     * @param boolean $allowTemplateOverrideCollection.
     *
     * @return void
     */
    public function setAllowTemplateOverrideCollection($allowTemplateOverrideCollection)
    {
        if ($allowTemplateOverrideCollection !== $this->allowTemplateOverrideCollection) {
            $this->allowTemplateOverrideCollection = (bool)$allowTemplateOverrideCollection;
        }
    }
    
    /**
     * Get default template detail.
     *
     * @return string
     */
    public function getDefaultTemplateDetail()
    {
        return $this->defaultTemplateDetail;
    }
    
    /**
     * Set default template detail.
     *
     * @param string $defaultTemplateDetail.
     *
     * @return void
     */
    public function setDefaultTemplateDetail($defaultTemplateDetail)
    {
        if ($defaultTemplateDetail != $this->defaultTemplateDetail) {
            $this->defaultTemplateDetail = $defaultTemplateDetail;
        }
    }
    
    /**
     * Get allow template override detail.
     *
     * @return boolean
     */
    public function getAllowTemplateOverrideDetail()
    {
        return $this->allowTemplateOverrideDetail;
    }
    
    /**
     * Set allow template override detail.
     *
     * @param boolean $allowTemplateOverrideDetail.
     *
     * @return void
     */
    public function setAllowTemplateOverrideDetail($allowTemplateOverrideDetail)
    {
        if ($allowTemplateOverrideDetail !== $this->allowTemplateOverrideDetail) {
            $this->allowTemplateOverrideDetail = (bool)$allowTemplateOverrideDetail;
        }
    }
    
    /**
     * Get start page view mode.
     *
     * @return smallint
     */
    public function getStartPageViewMode()
    {
        return $this->startPageViewMode;
    }
    
    /**
     * Set start page view mode.
     *
     * @param smallint $startPageViewMode.
     *
     * @return void
     */
    public function setStartPageViewMode($startPageViewMode)
    {
        if ($startPageViewMode != $this->startPageViewMode) {
            $this->startPageViewMode = $startPageViewMode;
        }
    }
    
    /**
     * Get download mode.
     *
     * @return smallint
     */
    public function getDownloadMode()
    {
        return $this->downloadMode;
    }
    
    /**
     * Set download mode.
     *
     * @param smallint $downloadMode.
     *
     * @return void
     */
    public function setDownloadMode($downloadMode)
    {
        if ($downloadMode != $this->downloadMode) {
            $this->downloadMode = $downloadMode;
        }
    }
    
    /**
     * Get send mail after upload.
     *
     * @return boolean
     */
    public function getSendMailAfterUpload()
    {
        return $this->sendMailAfterUpload;
    }
    
    /**
     * Set send mail after upload.
     *
     * @param boolean $sendMailAfterUpload.
     *
     * @return void
     */
    public function setSendMailAfterUpload($sendMailAfterUpload)
    {
        if ($sendMailAfterUpload !== $this->sendMailAfterUpload) {
            $this->sendMailAfterUpload = (bool)$sendMailAfterUpload;
        }
    }
    
    /**
     * Get mail recipient.
     *
     * @return string
     */
    public function getMailRecipient()
    {
        return $this->mailRecipient;
    }
    
    /**
     * Set mail recipient.
     *
     * @param string $mailRecipient.
     *
     * @return void
     */
    public function setMailRecipient($mailRecipient)
    {
        if ($mailRecipient != $this->mailRecipient) {
            $this->mailRecipient = $mailRecipient;
        }
    }
    
    /**
     * Get categories.
     *
     * @return array
     */
    public function getCategories()
    {
        return $this->categories;
    }
    
    /**
     * Set categories.
     *
     * @param array $categories.
     *
     * @return void
     */
    public function setCategories($categories)
    {
        $this->categories = $categories;
    }
    
    /**
     * Get created user id.
     *
     * @return integer[]
     */
    public function getCreatedUserId()
    {
        return $this->createdUserId;
    }
    
    /**
     * Set created user id.
     *
     * @param integer[] $createdUserId.
     *
     * @return void
     */
    public function setCreatedUserId($createdUserId)
    {
        $this->createdUserId = $createdUserId;
    }
    
    /**
     * Get updated user id.
     *
     * @return integer[]
     */
    public function getUpdatedUserId()
    {
        return $this->updatedUserId;
    }
    
    /**
     * Set updated user id.
     *
     * @param integer[] $updatedUserId.
     *
     * @return void
     */
    public function setUpdatedUserId($updatedUserId)
    {
        $this->updatedUserId = $updatedUserId;
    }
    
    /**
     * Get created date.
     *
     * @return datetime[]
     */
    public function getCreatedDate()
    {
        return $this->createdDate;
    }
    
    /**
     * Set created date.
     *
     * @param datetime[] $createdDate.
     *
     * @return void
     */
    public function setCreatedDate($createdDate)
    {
        $this->createdDate = $createdDate;
    }
    
    /**
     * Get updated date.
     *
     * @return datetime[]
     */
    public function getUpdatedDate()
    {
        return $this->updatedDate;
    }
    
    /**
     * Set updated date.
     *
     * @param datetime[] $updatedDate.
     *
     * @return void
     */
    public function setUpdatedDate($updatedDate)
    {
        $this->updatedDate = $updatedDate;
    }
    
    
    /**
     * Get files.
     *
     * @return MediaRepository_Entity_Medium[]
     */
    public function getFiles()
    {
        return $this->files;
    }
    
    /**
     * Set files.
     *
     * @param MediaRepository_Entity_Medium[] $files.
     *
     * @return void
     */
    public function setFiles($files)
    {
        $this->files = $files;
    }
    
    /**
     * Adds an instance of MediaRepository_Entity_Medium to the list of files.
     *
     * @param MediaRepository_Entity_Medium $medium
     .
     *
     * @return void
     */
    public function addFiles(MediaRepository_Entity_Medium $medium
    )
    {
        $this->files[] = $medium;
    }
    
    /**
     * Removes an instance of MediaRepository_Entity_Medium from the list of files.
     *
     * @param MediaRepository_Entity_Medium $medium.
     *
     * @return void
     */
    public function removeFiles(MediaRepository_Entity_Medium $medium)
    {
        $this->files->removeElement($medium);
    }
    
    /**
     * Get thumb sizes.
     *
     * @return MediaRepository_Entity_ThumbSize[]
     */
    public function getThumbSizes()
    {
        return $this->thumbSizes;
    }
    
    /**
     * Set thumb sizes.
     *
     * @param MediaRepository_Entity_ThumbSize[] $thumbSizes.
     *
     * @return void
     */
    public function setThumbSizes($thumbSizes)
    {
        $this->thumbSizes = $thumbSizes;
    }
    
    /**
     * Adds an instance of MediaRepository_Entity_ThumbSize to the list of thumb sizes.
     *
     * @param MediaRepository_Entity_ThumbSize $thumbSize.
     *
     * @return void
     */
    public function addThumbSizes(MediaRepository_Entity_ThumbSize $thumbSize)
    {
        $this->thumbSizes[] = $thumbSize;
    }
    
    /**
     * Removes an instance of MediaRepository_Entity_ThumbSize from the list of thumb sizes.
     *
     * @param MediaRepository_Entity_ThumbSize $thumbSize.
     *
     * @return void
     */
    public function removeThumbSizes(MediaRepository_Entity_ThumbSize $thumbSize)
    {
        $this->thumbSizes->removeElement($thumbSize);
    }
    
    
    /**
     * Initialise validator and return it's instance.
     *
     * @return MediaRepository_Entity_Validator_Repository The validator for this entity.
     */
    public function initValidator()
    {
        if (!is_null($this->_validator)) {
            return $this->_validator;
        }
        $this->_validator = new MediaRepository_Entity_Validator_Repository($this);
        return $this->_validator;
    }
    
    /**
     * Start validation and raise exception if invalid data is found.
     *
     * @return void.
     * @throws Zikula_Exception
     */
    public function validate()
    {
        $result = $this->initValidator()->validateAll();
        if (is_array($result)) {
            throw new Zikula_Exception($result['message'], $result['code'], $result['debugArray']);
        }
    }
    
    /**
     * Return entity data in JSON format.
     *
     * @return string JSON-encoded data.
     */
    public function toJson()
    {
        return json_encode($this->toArray());
    }
    
    /**
     * Collect available actions for this entity.
     */
    protected function prepareItemActions()
    {
        if (!empty($this->_actions)) {
            return;
        }
    
        $currentType = FormUtil::getPassedValue('type', 'user', 'GETPOST', FILTER_SANITIZE_STRING);
        $currentFunc = FormUtil::getPassedValue('func', 'main', 'GETPOST', FILTER_SANITIZE_STRING);
        $dom = ZLanguage::getModuleDomain('MediaRepository');
        if ($currentType == 'admin') {
            if (in_array($currentFunc, array('main', 'view'))) {
                $this->_actions[] = array(
                    'url' => array('type' => 'user', 'func' => 'display', 'arguments' => array('ot' => 'repository', 'id' => $this['id'])),
                    'icon' => 'preview',
                    'linkTitle' => __('Open preview page', $dom),
                    'linkText' => __('Preview', $dom)
                );
                $this->_actions[] = array(
                    'url' => array('type' => 'admin', 'func' => 'display', 'arguments' => array('ot' => 'repository', 'id' => $this['id'])),
                    'icon' => 'display',
                    'linkTitle' => str_replace('"', '', $this['name']),
                    'linkText' => __('Details', $dom)
                );
            }
            if (in_array($currentFunc, array('main', 'view', 'display'))) {
                    if (SecurityUtil::checkPermission('MediaRepository:Repository:', $this->id . '::', ACCESS_EDIT)) {
                $this->_actions[] = array(
                    'url' => array('type' => 'admin', 'func' => 'edit', 'arguments' => array('ot' => 'repository', 'id' => $this['id'])),
                    'icon' => 'edit',
                    'linkTitle' => __('Edit', $dom),
                    'linkText' => __('Edit', $dom)
                );
                        $this->_actions[] = array(
                            'url' => array('type' => 'admin', 'func' => 'edit', 'arguments' => array('ot' => 'repository', 'astemplate' => $this['id'])),
                            'icon' => 'saveas',
                            'linkTitle' => __('Reuse for new item', $dom),
                            'linkText' => __('Reuse', $dom)
                        );
                    }
            }
            if ($currentFunc == 'display') {
                $this->_actions[] = array(
                    'url' => array('type' => 'admin', 'func' => 'view', 'arguments' => array('ot' => 'repository')),
                    'icon' => 'back',
                    'linkTitle' => __('Back to overview', $dom),
                    'linkText' => __('Back to overview', $dom)
                );
            }
        }
        if ($currentType == 'user') {
            if (in_array($currentFunc, array('main', 'view'))) {
                $this->_actions[] = array(
                    'url' => array('type' => 'user', 'func' => 'display', 'arguments' => array('ot' => 'repository', 'id' => $this['id'])),
                    'icon' => 'display',
                    'linkTitle' => str_replace('"', '', $this['name']),
                    'linkText' => __('Details', $dom)
                );
            }
            if (in_array($currentFunc, array('main', 'view', 'display'))) {
                    if (SecurityUtil::checkPermission('MediaRepository:Repository:', $this->id . '::', ACCESS_EDIT)) {
                $this->_actions[] = array(
                    'url' => array('type' => 'user', 'func' => 'edit', 'arguments' => array('ot' => 'repository', 'id' => $this['id'])),
                    'icon' => 'edit',
                    'linkTitle' => __('Edit', $dom),
                    'linkText' => __('Edit', $dom)
                );
                        $this->_actions[] = array(
                            'url' => array('type' => 'user', 'func' => 'edit', 'arguments' => array('ot' => 'repository', 'astemplate' => $this['id'])),
                            'icon' => 'saveas',
                            'linkTitle' => __('Reuse for new item', $dom),
                            'linkText' => __('Reuse', $dom)
                        );
                    }
            }
            if ($currentFunc == 'display') {
                $this->_actions[] = array(
                    'url' => array('type' => 'user', 'func' => 'view', 'arguments' => array('ot' => 'repository')),
                    'icon' => 'back',
                    'linkTitle' => __('Back to overview', $dom),
                    'linkText' => __('Back to overview', $dom)
                );
            }
        }
    }

    
    /**
     * Post-Process the data after the entity has been constructed by the entity manager.
     * The event happens after the entity has been loaded from database or after a refresh call.
     *
     * Restrictions:
     *     - no access to entity manager or unit of work apis
     *     - no access to associations (not initialised yet)
     *
     * @see MediaRepository_Entity_Repository::postLoadCallback()
     * @return boolean true if completed successfully else false.
     */
    protected function performPostLoadCallback()
    {
        // echo 'loaded a record ...';
        $currentFunc = FormUtil::getPassedValue('func', 'main', 'GETPOST', FILTER_SANITIZE_STRING);
        
        $this['id'] = (int) ((isset($this['id']) && !empty($this['id'])) ? DataUtil::formatForDisplay($this['id']) : 0);
        if ($currentFunc != 'edit') {
            $this['name'] = ((isset($this['name']) && !empty($this['name'])) ? DataUtil::formatForDisplayHTML($this['name']) : '');
        }
        if ($currentFunc != 'edit') {
            $this['workDirectory'] = ((isset($this['workDirectory']) && !empty($this['workDirectory'])) ? DataUtil::formatForDisplayHTML($this['workDirectory']) : '');
        }
        if ($currentFunc != 'edit') {
            $this['storageDirectory'] = ((isset($this['storageDirectory']) && !empty($this['storageDirectory'])) ? DataUtil::formatForDisplayHTML($this['storageDirectory']) : '');
        }
        if ($currentFunc != 'edit') {
            $this['cacheDirectory'] = ((isset($this['cacheDirectory']) && !empty($this['cacheDirectory'])) ? DataUtil::formatForDisplayHTML($this['cacheDirectory']) : '');
        }
        $this['storageMode'] = (int) ((isset($this['storageMode']) && !empty($this['storageMode'])) ? DataUtil::formatForDisplay($this['storageMode']) : 0);
        $this['permissionScope'] = (int) ((isset($this['permissionScope']) && !empty($this['permissionScope'])) ? DataUtil::formatForDisplay($this['permissionScope']) : 0);
        $this['useQuota'] = (bool) $this['useQuota'];
        $this['allowManagementOfOwnFiles'] = (bool) $this['allowManagementOfOwnFiles'];
        $this['allowFileMailing'] = (bool) $this['allowFileMailing'];
        $this['maxSizeForMail'] = (int) ((isset($this['maxSizeForMail']) && !empty($this['maxSizeForMail'])) ? DataUtil::formatForDisplay($this['maxSizeForMail']) : 0);
        $this['maxFilesPerUpload'] = (int) ((isset($this['maxFilesPerUpload']) && !empty($this['maxFilesPerUpload'])) ? DataUtil::formatForDisplay($this['maxFilesPerUpload']) : 0);
        $this['maxUploadFileSize'] = (int) ((isset($this['maxUploadFileSize']) && !empty($this['maxUploadFileSize'])) ? DataUtil::formatForDisplay($this['maxUploadFileSize']) : 0);
        $this['uploadNamingConvention'] = (int) ((isset($this['uploadNamingConvention']) && !empty($this['uploadNamingConvention'])) ? DataUtil::formatForDisplay($this['uploadNamingConvention']) : 0);
        if ($currentFunc != 'edit') {
            $this['uploadNamingPrefix'] = ((isset($this['uploadNamingPrefix']) && !empty($this['uploadNamingPrefix'])) ? DataUtil::formatForDisplayHTML($this['uploadNamingPrefix']) : '');
        }
        $this['enableSharpen'] = (bool) $this['enableSharpen'];
        $this['enableShrinking'] = (bool) $this['enableShrinking'];
        $this['shrinkDimensions'] = ((isset($this['shrinkDimensions']) && is_array($this['shrinkDimensions'])) ? DataUtil::formatForDisplay($this['shrinkDimensions']) : array());
        $this['useThumbCropper'] = (bool) $this['useThumbCropper'];
        $this['cropSizeMode'] = (int) ((isset($this['cropSizeMode']) && !empty($this['cropSizeMode'])) ? DataUtil::formatForDisplay($this['cropSizeMode']) : 0);
        if ($currentFunc != 'edit') {
            $this['defaultTemplateCollection'] = ((isset($this['defaultTemplateCollection']) && !empty($this['defaultTemplateCollection'])) ? DataUtil::formatForDisplayHTML($this['defaultTemplateCollection']) : '');
        }
        $this['allowTemplateOverrideCollection'] = (bool) $this['allowTemplateOverrideCollection'];
        if ($currentFunc != 'edit') {
            $this['defaultTemplateDetail'] = ((isset($this['defaultTemplateDetail']) && !empty($this['defaultTemplateDetail'])) ? DataUtil::formatForDisplayHTML($this['defaultTemplateDetail']) : '');
        }
        $this['allowTemplateOverrideDetail'] = (bool) $this['allowTemplateOverrideDetail'];
        $this['startPageViewMode'] = (int) ((isset($this['startPageViewMode']) && !empty($this['startPageViewMode'])) ? DataUtil::formatForDisplay($this['startPageViewMode']) : 0);
        $this['downloadMode'] = (int) ((isset($this['downloadMode']) && !empty($this['downloadMode'])) ? DataUtil::formatForDisplay($this['downloadMode']) : 0);
        $this['sendMailAfterUpload'] = (bool) $this['sendMailAfterUpload'];
        if ($currentFunc != 'edit') {
            $this['mailRecipient'] = ((isset($this['mailRecipient']) && !empty($this['mailRecipient'])) ? DataUtil::formatForDisplayHTML($this['mailRecipient']) : '');
        }
        $this->prepareItemActions();
        return true;
    }
    
    /**
     * Pre-Process the data prior to an insert operation.
     * The event happens before the entity managers persist operation is executed for this entity.
     *
     * Restrictions:
     *     - no access to entity manager or unit of work apis
     *     - no identifiers available if using an identity generator like sequences
     *     - Doctrine won't recognize changes on relations which are done here
     *       if this method is called by cascade persist
     *     - no creation of other entities allowed
     *
     * @see MediaRepository_Entity_Repository::prePersistCallback()
     * @return boolean true if completed successfully else false.
     */
    protected function performPrePersistCallback()
    {
        // echo 'inserting a record ...';
        $this->validate();
        return true;
    }
    
    /**
     * Post-Process the data after an insert operation.
     * The event happens after the entity has been made persistant.
     * Will be called after the database insert operations.
     * The generated primary key values are available.
     *
     * Restrictions:
     *     - no access to entity manager or unit of work apis
     *
     * @see MediaRepository_Entity_Repository::postPersistCallback()
     * @return boolean true if completed successfully else false.
     */
    protected function performPostPersistCallback()
    {
        // echo 'inserted a record ...';
        return true;
    }
    
    /**
     * Pre-Process the data prior a delete operation.
     * The event happens before the entity managers remove operation is executed for this entity.
     *
     * Restrictions:
     *     - no access to entity manager or unit of work apis
     *     - will not be called for a DQL DELETE statement
     *
     * @see MediaRepository_Entity_Repository::preRemoveCallback()
     * @return boolean true if completed successfully else false.
     */
    protected function performPreRemoveCallback()
    {
        // delete workflow for this entity
        /*$result = Zikula_Workflow_Util::deleteWorkflow($this);
        if ($result === false) {
            $dom = ZLanguage::getModuleDomain('MediaRepository');
            return LogUtil::registerError(__('Error! Could not remove stored workflow.', $dom));
        }*/
        return true;
    }
    
    /**
     * Post-Process the data after a delete.
     * The event happens after the entity has been deleted.
     * Will be called after the database delete operations.
     *
     * Restrictions:
     *     - no access to entity manager or unit of work apis
     *     - will not be called for a DQL DELETE statement
     *
     * @see MediaRepository_Entity_Repository::postRemoveCallback()
     * @return boolean true if completed successfully else false.
     */
    protected function performPostRemoveCallback()
    {
        // echo 'deleted a record ...';
        return true;
    }
    
    /**
     * Pre-Process the data prior to an update operation.
     * The event happens before the database update operations for the entity data.
     *
     * Restrictions:
     *     - no access to entity manager or unit of work apis
     *     - will not be called for a DQL UPDATE statement
     *     - changes on associations are not allowed and won't be recognized by flush
     *     - changes on properties won't be recognized by flush as well
     *     - no creation of other entities allowed
     *
     * @see MediaRepository_Entity_Repository::preUpdateCallback()
     * @return boolean true if completed successfully else false.
     */
    protected function performPreUpdateCallback()
    {
        // echo 'updating a record ...';
        $this->validate();
        return true;
    }
    
    /**
     * Post-Process the data after an update operation.
     * The event happens after the database update operations for the entity data.
     *
     * Restrictions:
     *     - no access to entity manager or unit of work apis
     *     - will not be called for a DQL UPDATE statement
     *
     * @see MediaRepository_Entity_Repository::postUpdateCallback()
     * @return boolean true if completed successfully else false.
     */
    protected function performPostUpdateCallback()
    {
        // echo 'updated a record ...';
        return true;
    }
    
    /**
     * Pre-Process the data prior to a save operation.
     * This combines the PrePersist and PreUpdate events.
     * For more information see corresponding callback handlers.
     *
     * @see MediaRepository_Entity_Repository::preSaveCallback()
     * @return boolean true if completed successfully else false.
     */
    protected function performPreSaveCallback()
    {
        // echo 'saving a record ...';
        $this->validate();
        return true;
    }
    
    /**
     * Post-Process the data after a save operation.
     * This combines the PostPersist and PostUpdate events.
     * For more information see corresponding callback handlers.
     *
     * @see MediaRepository_Entity_Repository::postSaveCallback()
     * @return boolean true if completed successfully else false.
     */
    protected function performPostSaveCallback()
    {
        // echo 'saved a record ...';
        return true;
    }
    
}
