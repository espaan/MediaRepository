<?php
/**
 * MediaRepository.
 *
 * @copyright Axel Guckelsberger
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @package MediaRepository
 * @author Axel Guckelsberger <info@guite.de>.
 * @link http://zikula.de
 * @link http://zikula.org
 * @version Generated by ModuleStudio 0.5.5 (http://modulestudio.de) at Wed May 30 16:44:53 CEST 2012.
 */

use Doctrine\ORM\Mapping as ORM;
use Gedmo\Mapping\Annotation as Gedmo;
use DoctrineExtensions\StandardFields\Mapping\Annotation as ZK;

/**
 * Entity class that defines the entity structure and behaviours.
 *
 * This is the base entity class for media handler entities.
 *
 * @abstract
 */
abstract class MediaRepository_Entity_Base_MediaHandler extends Zikula_EntityAccess
{
    /**
     * @var string The tablename this object maps to
     */
    protected $_objectType = 'mediaHandler';
    
    /**
     * @var array List of primary key field names
     */
    protected $_idFields = array();
    
    /**
     * @var MediaRepository_Entity_Validator_MediaHandler The validator for this entity
     */
    protected $_validator = null;
    
    /**
     * @var boolean Whether this entity supports unique slugs
     */
    protected $_hasUniqueSlug = false;
    
    /**
     * @var array List of available item actions
     */
    protected $_actions = array();
    
    /**
     * @ORM\Id
     * @ORM\GeneratedValue
     * @ORM\Column(type="integer", unique=true)
     * @var integer $id.
     */
    protected $id = 0;
    
    /**
     * @ORM\Column(length=50)
     * @var string $mimeType.
     */
    protected $mimeType = '';
    
    /**
     * @ORM\Column(length=20)
     * @var string $fileType.
     */
    protected $fileType = '';
    
    /**
     * @ORM\Column(length=50)
     * @var string $foundMimeType.
     */
    protected $foundMimeType = '';
    
    /**
     * @ORM\Column(length=50)
     * @var string $foundFileType.
     */
    protected $foundFileType = '';
    
    /**
     * @ORM\Column(length=50)
     * @var string $handlerName.
     */
    protected $handlerName = '';
    
    /**
     * @ORM\Column(length=50)
     * @var string $title.
     */
    protected $title = '';
    
    /**
     * @ORM\Column(type="boolean")
     * @var boolean $active.
     */
    protected $active = true;
    
    /**
     * Image meta data array.
     *
     * @ORM\Column(type="array")
     * @var array $imageMeta.
     */
    protected $imageMeta = array();
    
    /**
     * @ORM\Column(length=255)
     * @var string $image.
     */
    protected $image = '';
    
    
    /**
     * The full path to the image.
     *
     * @var string $imageFullPath.
     */
    protected $imageFullPath = '';
    
    /**
     * Full image path as url.
     *
     * @var string $imageFullPathUrl.
     */
    protected $imageFullPathUrl = '';
    
    /**
     * @ORM\Column(type="integer")
     * @ZK\StandardFields(type="userid", on="create")
     * @var integer $createdUserId.
     */
    protected $createdUserId;
    
    /**
     * @ORM\Column(type="integer")
     * @ZK\StandardFields(type="userid", on="update")
     * @var integer $updatedUserId.
     */
    protected $updatedUserId;
    
    /**
     * @ORM\Column(type="datetime")
     * @Gedmo\Timestampable(on="create")
     * @var datetime $createdDate.
     */
    protected $createdDate;
    
    /**
     * @ORM\Column(type="datetime")
     * @Gedmo\Timestampable(on="update")
     * @var datetime $updatedDate.
     */
    protected $updatedDate;
    
    
    /**
     * Constructor.
     * Will not be called by Doctrine and can therefore be used
     * for own implementation purposes. It is also possible to add
     * arbitrary arguments as with every other class method.
     *
     * @param TODO
     */
    public function __construct()
    {
        $this->id = 1;
        $this->_idFields = array('id');
        $this->initValidator();
        $this->_hasUniqueSlug = false;
    }
    
    /**
     * Get _object type.
     *
     * @return string
     */
    public function get_objectType()
    {
        return $this->_objectType;
    }
    
    /**
     * Set _object type.
     *
     * @param string $_objectType.
     *
     * @return void
     */
    public function set_objectType($_objectType)
    {
        $this->_objectType = $_objectType;
    }
    
    /**
     * Get _id fields.
     *
     * @return array
     */
    public function get_idFields()
    {
        return $this->_idFields;
    }
    
    /**
     * Set _id fields.
     *
     * @param array $_idFields.
     *
     * @return void
     */
    public function set_idFields(array $_idFields = Array())
    {
        $this->_idFields = $_idFields;
    }
    
    /**
     * Get _validator.
     *
     * @return MediaRepository_Entity_Validator_MediaHandler
     */
    public function get_validator()
    {
        return $this->_validator;
    }
    
    /**
     * Set _validator.
     *
     * @param MediaRepository_Entity_Validator_MediaHandler $_validator.
     *
     * @return void
     */
    public function set_validator(MediaRepository_Entity_Validator_MediaHandler $_validator = null)
    {
        $this->_validator = $_validator;
    }
    
    /**
     * Get _has unique slug.
     *
     * @return boolean
     */
    public function get_hasUniqueSlug()
    {
        return $this->_hasUniqueSlug;
    }
    
    /**
     * Set _has unique slug.
     *
     * @param boolean $_hasUniqueSlug.
     *
     * @return void
     */
    public function set_hasUniqueSlug($_hasUniqueSlug)
    {
        $this->_hasUniqueSlug = $_hasUniqueSlug;
    }
    
    /**
     * Get _actions.
     *
     * @return array
     */
    public function get_actions()
    {
        return $this->_actions;
    }
    
    /**
     * Set _actions.
     *
     * @param array $_actions.
     *
     * @return void
     */
    public function set_actions(array $_actions = Array())
    {
        $this->_actions = $_actions;
    }
    
    
    /**
     * Get id.
     *
     * @return integer
     */
    public function getId()
    {
        return $this->id;
    }
    
    /**
     * Set id.
     *
     * @param integer $id.
     *
     * @return void
     */
    public function setId($id)
    {
        if ($id != $this->id) {
            $this->id = $id;
        }
    }
    
    /**
     * Get mime type.
     *
     * @return string
     */
    public function getMimeType()
    {
        return $this->mimeType;
    }
    
    /**
     * Set mime type.
     *
     * @param string $mimeType.
     *
     * @return void
     */
    public function setMimeType($mimeType)
    {
        if ($mimeType != $this->mimeType) {
            $this->mimeType = $mimeType;
        }
    }
    
    /**
     * Get file type.
     *
     * @return string
     */
    public function getFileType()
    {
        return $this->fileType;
    }
    
    /**
     * Set file type.
     *
     * @param string $fileType.
     *
     * @return void
     */
    public function setFileType($fileType)
    {
        if ($fileType != $this->fileType) {
            $this->fileType = $fileType;
        }
    }
    
    /**
     * Get found mime type.
     *
     * @return string
     */
    public function getFoundMimeType()
    {
        return $this->foundMimeType;
    }
    
    /**
     * Set found mime type.
     *
     * @param string $foundMimeType.
     *
     * @return void
     */
    public function setFoundMimeType($foundMimeType)
    {
        if ($foundMimeType != $this->foundMimeType) {
            $this->foundMimeType = $foundMimeType;
        }
    }
    
    /**
     * Get found file type.
     *
     * @return string
     */
    public function getFoundFileType()
    {
        return $this->foundFileType;
    }
    
    /**
     * Set found file type.
     *
     * @param string $foundFileType.
     *
     * @return void
     */
    public function setFoundFileType($foundFileType)
    {
        if ($foundFileType != $this->foundFileType) {
            $this->foundFileType = $foundFileType;
        }
    }
    
    /**
     * Get handler name.
     *
     * @return string
     */
    public function getHandlerName()
    {
        return $this->handlerName;
    }
    
    /**
     * Set handler name.
     *
     * @param string $handlerName.
     *
     * @return void
     */
    public function setHandlerName($handlerName)
    {
        if ($handlerName != $this->handlerName) {
            $this->handlerName = $handlerName;
        }
    }
    
    /**
     * Get title.
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->title;
    }
    
    /**
     * Set title.
     *
     * @param string $title.
     *
     * @return void
     */
    public function setTitle($title)
    {
        if ($title != $this->title) {
            $this->title = $title;
        }
    }
    
    /**
     * Get active.
     *
     * @return boolean
     */
    public function getActive()
    {
        return $this->active;
    }
    
    /**
     * Set active.
     *
     * @param boolean $active.
     *
     * @return void
     */
    public function setActive($active)
    {
        if ($active !== $this->active) {
            $this->active = (bool)$active;
        }
    }
    
    /**
     * Get image.
     *
     * @return string
     */
    public function getImage()
    {
        return $this->image;
    }
    
    /**
     * Set image.
     *
     * @param string $image.
     *
     * @return void
     */
    public function setImage($image)
    {
        if ($image != $this->image) {
            $this->image = $image;
        }
    }
    
    /**
     * Get image full path.
     *
     * @return string
     */
    public function getImageFullPath()
    {
        return $this->imageFullPath;
    }
    
    /**
     * Set image full path.
     *
     * @param string $imageFullPath.
     *
     * @return void
     */
    public function setImageFullPath($imageFullPath)
    {
        if ($imageFullPath != $this->imageFullPath) {
            $this->imageFullPath = $imageFullPath;
        }
    }
    
    /**
     * Get image full path url.
     *
     * @return string
     */
    public function getImageFullPathUrl()
    {
        return $this->imageFullPathUrl;
    }
    
    /**
     * Set image full path url.
     *
     * @param string $imageFullPathUrl.
     *
     * @return void
     */
    public function setImageFullPathUrl($imageFullPathUrl)
    {
        if ($imageFullPathUrl != $this->imageFullPathUrl) {
            $this->imageFullPathUrl = $imageFullPathUrl;
        }
    }
    
    /**
     * Get image meta.
     *
     * @return array
     */
    public function getImageMeta()
    {
        return $this->imageMeta;
    }
    
    /**
     * Set image meta.
     *
     * @param array $imageMeta.
     *
     * @return void
     */
    public function setImageMeta($imageMeta = Array())
    {
        if ($imageMeta != $this->imageMeta) {
            $this->imageMeta = $imageMeta;
        }
    }
    
    /**
     * Get created user id.
     *
     * @return integer[]
     */
    public function getCreatedUserId()
    {
        return $this->createdUserId;
    }
    
    /**
     * Set created user id.
     *
     * @param integer[] $createdUserId.
     *
     * @return void
     */
    public function setCreatedUserId($createdUserId)
    {
        $this->createdUserId = $createdUserId;
    }
    
    /**
     * Get updated user id.
     *
     * @return integer[]
     */
    public function getUpdatedUserId()
    {
        return $this->updatedUserId;
    }
    
    /**
     * Set updated user id.
     *
     * @param integer[] $updatedUserId.
     *
     * @return void
     */
    public function setUpdatedUserId($updatedUserId)
    {
        $this->updatedUserId = $updatedUserId;
    }
    
    /**
     * Get created date.
     *
     * @return datetime[]
     */
    public function getCreatedDate()
    {
        return $this->createdDate;
    }
    
    /**
     * Set created date.
     *
     * @param datetime[] $createdDate.
     *
     * @return void
     */
    public function setCreatedDate($createdDate)
    {
        $this->createdDate = $createdDate;
    }
    
    /**
     * Get updated date.
     *
     * @return datetime[]
     */
    public function getUpdatedDate()
    {
        return $this->updatedDate;
    }
    
    /**
     * Set updated date.
     *
     * @param datetime[] $updatedDate.
     *
     * @return void
     */
    public function setUpdatedDate($updatedDate)
    {
        $this->updatedDate = $updatedDate;
    }
    
    
    
    /**
     * Initialise validator and return it's instance.
     *
     * @return MediaRepository_Entity_Validator_MediaHandler The validator for this entity.
     */
    public function initValidator()
    {
        if (!is_null($this->_validator)) {
            return $this->_validator;
        }
        $this->_validator = new MediaRepository_Entity_Validator_MediaHandler($this);
        return $this->_validator;
    }
    
    /**
     * Start validation and raise exception if invalid data is found.
     *
     * @return void.
     * @throws Zikula_Exception
     */
    public function validate()
    {
        $result = $this->initValidator()->validateAll();
        if (is_array($result)) {
            throw new Zikula_Exception($result['message'], $result['code'], $result['debugArray']);
        }
    }
    
    /**
     * Return entity data in JSON format.
     *
     * @return string JSON-encoded data.
     */
    public function toJson()
    {
        return json_encode($this->toArray());
    }
    
    /**
     * Collect available actions for this entity.
     */
    protected function prepareItemActions()
    {
        if (!empty($this->_actions)) {
            return;
        }
    
        $currentType = FormUtil::getPassedValue('type', 'user', 'GETPOST', FILTER_SANITIZE_STRING);
        $currentFunc = FormUtil::getPassedValue('func', 'main', 'GETPOST', FILTER_SANITIZE_STRING);
        $dom = ZLanguage::getModuleDomain('MediaRepository');
        if ($currentType == 'admin') {
            if (in_array($currentFunc, array('main', 'view'))) {
                $this->_actions[] = array(
                    'url' => array('type' => 'user', 'func' => 'display', 'arguments' => array('ot' => 'mediaHandler', 'id' => $this['id'])),
                    'icon' => 'preview',
                    'linkTitle' => __('Open preview page', $dom),
                    'linkText' => __('Preview', $dom)
                );
                $this->_actions[] = array(
                    'url' => array('type' => 'admin', 'func' => 'display', 'arguments' => array('ot' => 'mediaHandler', 'id' => $this['id'])),
                    'icon' => 'display',
                    'linkTitle' => str_replace('"', '', $this['title']),
                    'linkText' => __('Details', $dom)
                );
            }
            if (in_array($currentFunc, array('main', 'view', 'display'))) {
                    if (SecurityUtil::checkPermission('MediaRepository:MediaHandler:', $this->id . '::', ACCESS_EDIT)) {
                $this->_actions[] = array(
                    'url' => array('type' => 'admin', 'func' => 'edit', 'arguments' => array('ot' => 'mediaHandler', 'id' => $this['id'])),
                    'icon' => 'edit',
                    'linkTitle' => __('Edit', $dom),
                    'linkText' => __('Edit', $dom)
                );
                        $this->_actions[] = array(
                            'url' => array('type' => 'admin', 'func' => 'edit', 'arguments' => array('ot' => 'mediaHandler', 'astemplate' => $this['id'])),
                            'icon' => 'saveas',
                            'linkTitle' => __('Reuse for new item', $dom),
                            'linkText' => __('Reuse', $dom)
                        );
                    }
            }
            if ($currentFunc == 'display') {
                $this->_actions[] = array(
                    'url' => array('type' => 'admin', 'func' => 'view', 'arguments' => array('ot' => 'mediaHandler')),
                    'icon' => 'back',
                    'linkTitle' => __('Back to overview', $dom),
                    'linkText' => __('Back to overview', $dom)
                );
            }
        }
        if ($currentType == 'user') {
            if (in_array($currentFunc, array('main', 'view'))) {
                $this->_actions[] = array(
                    'url' => array('type' => 'user', 'func' => 'display', 'arguments' => array('ot' => 'mediaHandler', 'id' => $this['id'])),
                    'icon' => 'display',
                    'linkTitle' => str_replace('"', '', $this['title']),
                    'linkText' => __('Details', $dom)
                );
            }
            if (in_array($currentFunc, array('main', 'view', 'display'))) {
                    if (SecurityUtil::checkPermission('MediaRepository:MediaHandler:', $this->id . '::', ACCESS_EDIT)) {
                $this->_actions[] = array(
                    'url' => array('type' => 'user', 'func' => 'edit', 'arguments' => array('ot' => 'mediaHandler', 'id' => $this['id'])),
                    'icon' => 'edit',
                    'linkTitle' => __('Edit', $dom),
                    'linkText' => __('Edit', $dom)
                );
                        $this->_actions[] = array(
                            'url' => array('type' => 'user', 'func' => 'edit', 'arguments' => array('ot' => 'mediaHandler', 'astemplate' => $this['id'])),
                            'icon' => 'saveas',
                            'linkTitle' => __('Reuse for new item', $dom),
                            'linkText' => __('Reuse', $dom)
                        );
                    }
            }
            if ($currentFunc == 'display') {
                $this->_actions[] = array(
                    'url' => array('type' => 'user', 'func' => 'view', 'arguments' => array('ot' => 'mediaHandler')),
                    'icon' => 'back',
                    'linkTitle' => __('Back to overview', $dom),
                    'linkText' => __('Back to overview', $dom)
                );
            }
        }
    }

    
    /**
     * Post-Process the data after the entity has been constructed by the entity manager.
     * The event happens after the entity has been loaded from database or after a refresh call.
     *
     * Restrictions:
     *     - no access to entity manager or unit of work apis
     *     - no access to associations (not initialised yet)
     *
     * @see MediaRepository_Entity_MediaHandler::postLoadCallback()
     * @return boolean true if completed successfully else false.
     */
    protected function performPostLoadCallback()
    {
        // echo 'loaded a record ...';
        $currentFunc = FormUtil::getPassedValue('func', 'main', 'GETPOST', FILTER_SANITIZE_STRING);
        // initialise the upload handler
        $uploadManager = new MediaRepository_UploadHandler();
        
        $this['id'] = (int) ((isset($this['id']) && !empty($this['id'])) ? DataUtil::formatForDisplay($this['id']) : 0);
        if ($currentFunc != 'edit') {
            $this['mimeType'] = ((isset($this['mimeType']) && !empty($this['mimeType'])) ? DataUtil::formatForDisplayHTML($this['mimeType']) : '');
        }
        if ($currentFunc != 'edit') {
            $this['fileType'] = ((isset($this['fileType']) && !empty($this['fileType'])) ? DataUtil::formatForDisplayHTML($this['fileType']) : '');
        }
        if ($currentFunc != 'edit') {
            $this['foundMimeType'] = ((isset($this['foundMimeType']) && !empty($this['foundMimeType'])) ? DataUtil::formatForDisplayHTML($this['foundMimeType']) : '');
        }
        if ($currentFunc != 'edit') {
            $this['foundFileType'] = ((isset($this['foundFileType']) && !empty($this['foundFileType'])) ? DataUtil::formatForDisplayHTML($this['foundFileType']) : '');
        }
        if ($currentFunc != 'edit') {
            $this['handlerName'] = ((isset($this['handlerName']) && !empty($this['handlerName'])) ? DataUtil::formatForDisplayHTML($this['handlerName']) : '');
        }
        if ($currentFunc != 'edit') {
            $this['title'] = ((isset($this['title']) && !empty($this['title'])) ? DataUtil::formatForDisplayHTML($this['title']) : '');
        }
        $this['active'] = (bool) $this['active'];
        if (!empty($this['image'])) {
            $basePath = MediaRepository_Util_Controller::getFileBaseFolder('mediaHandler', 'image');
            $fullPath = $basePath .  $this['image'];
            $this['imageFullPath'] = $fullPath;
            $this['imageFullPathURL'] = System::getBaseUrl() . $fullPath;
        
            // just some backwards compatibility stuff
            if (!isset($this['imageMeta']) || !is_array($this['imageMeta']) || !count($this['imageMeta'])) {
                // assign new meta data
                $this['imageMeta'] = $uploadManager->readMetaDataForFile($this['image'], $fullPath);
            }
        }
        $this->prepareItemActions();
        return true;
    }
    
    /**
     * Pre-Process the data prior to an insert operation.
     * The event happens before the entity managers persist operation is executed for this entity.
     *
     * Restrictions:
     *     - no access to entity manager or unit of work apis
     *     - no identifiers available if using an identity generator like sequences
     *     - Doctrine won't recognize changes on relations which are done here
     *       if this method is called by cascade persist
     *     - no creation of other entities allowed
     *
     * @see MediaRepository_Entity_MediaHandler::prePersistCallback()
     * @return boolean true if completed successfully else false.
     */
    protected function performPrePersistCallback()
    {
        // echo 'inserting a record ...';
        $this->validate();
        return true;
    }
    
    /**
     * Post-Process the data after an insert operation.
     * The event happens after the entity has been made persistant.
     * Will be called after the database insert operations.
     * The generated primary key values are available.
     *
     * Restrictions:
     *     - no access to entity manager or unit of work apis
     *
     * @see MediaRepository_Entity_MediaHandler::postPersistCallback()
     * @return boolean true if completed successfully else false.
     */
    protected function performPostPersistCallback()
    {
        // echo 'inserted a record ...';
        return true;
    }
    
    /**
     * Pre-Process the data prior a delete operation.
     * The event happens before the entity managers remove operation is executed for this entity.
     *
     * Restrictions:
     *     - no access to entity manager or unit of work apis
     *     - will not be called for a DQL DELETE statement
     *
     * @see MediaRepository_Entity_MediaHandler::preRemoveCallback()
     * @return boolean true if completed successfully else false.
     */
    protected function performPreRemoveCallback()
    {
        // delete workflow for this entity
        /*$result = Zikula_Workflow_Util::deleteWorkflow($this);
        if ($result === false) {
            $dom = ZLanguage::getModuleDomain('MediaRepository');
            return LogUtil::registerError(__('Error! Could not remove stored workflow.', $dom));
        }*/
        return true;
    }
    
    /**
     * Post-Process the data after a delete.
     * The event happens after the entity has been deleted.
     * Will be called after the database delete operations.
     *
     * Restrictions:
     *     - no access to entity manager or unit of work apis
     *     - will not be called for a DQL DELETE statement
     *
     * @see MediaRepository_Entity_MediaHandler::postRemoveCallback()
     * @return boolean true if completed successfully else false.
     */
    protected function performPostRemoveCallback()
    {
        // echo 'deleted a record ...';
        // initialise the upload handler
        $uploadManager = new MediaRepository_UploadHandler();
    
        $uploadFields = array('image');
        foreach ($uploadFields as $uploadField) {
            if (empty($this->$uploadField)) {
                continue;
            }
    
            // remove upload file (and image thumbnails)
            $uploadManager->deleteUploadFile('mediaHandler', $this, $uploadField);
        }
        return true;
    }
    
    /**
     * Pre-Process the data prior to an update operation.
     * The event happens before the database update operations for the entity data.
     *
     * Restrictions:
     *     - no access to entity manager or unit of work apis
     *     - will not be called for a DQL UPDATE statement
     *     - changes on associations are not allowed and won't be recognized by flush
     *     - changes on properties won't be recognized by flush as well
     *     - no creation of other entities allowed
     *
     * @see MediaRepository_Entity_MediaHandler::preUpdateCallback()
     * @return boolean true if completed successfully else false.
     */
    protected function performPreUpdateCallback()
    {
        // echo 'updating a record ...';
        $this->validate();
        return true;
    }
    
    /**
     * Post-Process the data after an update operation.
     * The event happens after the database update operations for the entity data.
     *
     * Restrictions:
     *     - no access to entity manager or unit of work apis
     *     - will not be called for a DQL UPDATE statement
     *
     * @see MediaRepository_Entity_MediaHandler::postUpdateCallback()
     * @return boolean true if completed successfully else false.
     */
    protected function performPostUpdateCallback()
    {
        // echo 'updated a record ...';
        return true;
    }
    
    /**
     * Pre-Process the data prior to a save operation.
     * This combines the PrePersist and PreUpdate events.
     * For more information see corresponding callback handlers.
     *
     * @see MediaRepository_Entity_MediaHandler::preSaveCallback()
     * @return boolean true if completed successfully else false.
     */
    protected function performPreSaveCallback()
    {
        // echo 'saving a record ...';
        $this->validate();
        return true;
    }
    
    /**
     * Post-Process the data after a save operation.
     * This combines the PostPersist and PostUpdate events.
     * For more information see corresponding callback handlers.
     *
     * @see MediaRepository_Entity_MediaHandler::postSaveCallback()
     * @return boolean true if completed successfully else false.
     */
    protected function performPostSaveCallback()
    {
        // echo 'saved a record ...';
        return true;
    }
    
}
